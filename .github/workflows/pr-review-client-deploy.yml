name: Deploy PR Review Client environment

on:
  pull_request:
    branches:
      - develop  
    types:
      - labeled
      - opened
      - reopened
      - synchronize

env:
  AWS_DEFAULT_REGION: ca-central-1
  FUNCTION_NAME: "forms-client-pr"
  IMAGE: forms/client
  REGISTRY: 687401027353.dkr.ecr.ca-central-1.amazonaws.com/pr_review
  ROLE_ARN: arn:aws:iam::687401027353:role/forms-lambda-client

jobs:
  build-and-push-container:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'Renovate') }}
    runs-on: ubuntu-latest
    steps:
      - name: Set envs
        run: echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@dc323e67f16fb5f7663d20ff7941f27f5809e9b6 # v2.6.0

      - name: Configure aws credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: arn:aws:iam::687401027353:role/platform-forms-client-apply
          role-session-name: TFApply
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be # v1.5.3

      - name: Move dockerignore
        run: |
          mv ci/Dockerfile.lambda.dockerignore .

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.PR_NUMBER }} \
            --build-arg GITHUB_SHA_ARG=$GITHUB_SHA \
            --build-arg COGNITO_APP_CLIENT_ID=$COGNITO_APP_CLIENT_ID \
            --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID .
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.PR_NUMBER }}

      - name: Delete old images
        run: |
          IMAGES_TO_DELETE="$(aws ecr list-images --repository-name $IMAGE --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)"
          aws ecr batch-delete-image \
            --repository-name $IMAGE \
            --image-ids "$IMAGES_TO_DELETE" || true

      - name: Logout of Amazon ECR
        run: docker logout $REGISTRY

  deploy-test-client:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'Renovate') }}
    runs-on: ubuntu-latest
    needs: build-and-push-container
    steps:
      - name: Set envs
        run: echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Create/Update lambda function
        run: |
          if aws lambda get-function --function-name $FUNCTION_NAME-$PR_NUMBER > /dev/null 2>&1; then
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --image-uri $REGISTRY/$IMAGE:$PR_NUMBER > /dev/null 2>&1

          else
            aws lambda create-function \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --package-type Image \
              --role $ROLE_ARN \
              --timeout 15 \
              --memory-size 1024 \
              --code ImageUri=$REGISTRY/$IMAGE:$PR_NUMBER \
              --description "$GITHUB_REPOSITORY/pull/$PR_NUMBER" \
              --vpc-config SubnetIds=${{ secrets.PR_REVIEW_ENV_SUBNET_IDS }},SecurityGroupIds=${{ secrets.PR_REVIEW_ENV_SECURITY_GROUP_IDS }} > /dev/null 2>&1

            aws lambda wait function-active --function-name $FUNCTION_NAME-$PR_NUMBER
            aws lambda add-permission \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --statement-id FunctionURLAllowPublicAccess \
              --action lambda:InvokeFunctionUrl \
              --principal "*" \
              --function-url-auth-type NONE > /dev/null 2>&1

            URL="$(aws lambda create-function-url-config --function-name $FUNCTION_NAME-$PR_NUMBER --auth-type NONE | jq .FunctionUrl)"
            echo "URL=$URL" >> $GITHUB_ENV

            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --environment "Variables={\
                ENV=pr-review,\
              }" > /dev/null 2>&1

            aws logs create-log-group --log-group-name /aws/lambda/$FUNCTION_NAME-$PR_NUMBER > /dev/null 2>&1
            aws logs put-retention-policy --log-group-name /aws/lambda/$FUNCTION_NAME-$PR_NUMBER --retention-in-days 14 > /dev/null 2>&1
          fi

          aws lambda wait function-updated --function-name $FUNCTION_NAME-$PR_NUMBER
          aws lambda put-function-concurrency \
            --function-name $FUNCTION_NAME-$PR_NUMBER \
            --reserved-concurrent-executions 5

          PrUrl="$(aws lambda get-function-url-config --function-name $FUNCTION_NAME-$PR_NUMBER | jq .FunctionUrl)"
          ExistingCallbackUrls=$(aws cognito-idp describe-user-pool-client --user-pool-id $COGNITO_USER_POOL_ID --client-id $COGNITO_APP_CLIENT_ID --output text | grep CALLBACKURLS | awk '{print $2}')
          NewCallbackUrls="$ExistingCallbackUrls $PrUrl"
          aws cognito-idp update-user-pool-client --user-pool-id $COGNITO_USER_POOL_ID --client-id $COGNITO_APP_CLIENT_ID --callback-urls $NewCallbackUrls --region $AWS_REGION

      - name: Update PR
        if: env.URL != ''
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # v6.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## :test_tube: Review environment\n${process.env.URL.slice(1, -1)}`
            })