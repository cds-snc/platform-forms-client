name: Rainbow cleanup (production)

on:
  workflow_run:
    workflows: ["Deploy to Production"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      deployment-identifier:
        description: "Deployment identifier"
        type: string
        required: true
  schedule:
    - cron: "0 4 * * *" # Nightly at 4am

env:
  AWS_ACCOUNT_ID: ${{ vars.PRODUCTION_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  LOAD_BALANCER_LISTENER_ARN: ${{ vars.PRODUCTION_LOAD_BALANCER_LISTENER_ARN }}
  MAXIMUM_NUMBER_OF_RAINBOW_DEPLOYMENTS_TO_KEEP_ALIVE: 12

permissions:
  id-token: write
  contents: read

jobs:
  cleanup-workflow-run-or-dispatch:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/platform-forms-client-apply
          role-session-name: RainbowCleanup
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup triggered by GC Forms deployment failure
        if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' }}
        run: ./scripts/clean-up-rainbow-deployment.sh ${{ github.event.workflow_run.head_sha }} ${{ env.LOAD_BALANCER_LISTENER_ARN }} > /dev/null 2>&1

      - name: Cleanup triggered manually
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: ./scripts/clean-up-rainbow-deployment.sh ${{ inputs.deployment-identifier }} ${{ env.LOAD_BALANCER_LISTENER_ARN }} > /dev/null 2>&1

  cleanup-schedule-1:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    outputs:
      ids: ${{ steps.find-rainbow-deployments-ids.outputs.ids }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/platform-forms-client-apply
          role-session-name: RainbowCleanup
          aws-region: ${{ env.AWS_REGION }}

      - name: Find rainbow deployments to clean up
        id: find-rainbow-deployments-ids
        run: |
          arn_list=($(
            aws elbv2 describe-rules \
              --listener-arn ${{ env.LOAD_BALANCER_LISTENER_ARN }} \
              --no-paginate \
              --query "Rules[?contains(Actions[0].ForwardConfig.TargetGroups[0].TargetGroupArn, 'rainbow')]" \
              | jq -r '.[] | select(.Priority | tonumber > ${{ env.MAXIMUM_NUMBER_OF_RAINBOW_DEPLOYMENTS_TO_KEEP_ALIVE }}) | .RuleArn'
          ))

          if [ ${#arn_list[*]} -gt 0 ]; then
            deployment_ids=$(
              aws elbv2 describe-tags \
                --resource-arns "${arn_list[@]}" \
                | jq -r '[.TagDescriptions[].Tags[] | select(.Key == "Name") | .Value | sub("^rainbow-"; "")]'
            )

            echo "ids=$(echo $deployment_ids | sed 's/ //g')" >> "$GITHUB_OUTPUT"
          fi

  cleanup-schedule-2:
    runs-on: ubuntu-latest
    needs: cleanup-schedule-1
    if: ${{ needs.cleanup-schedule-1.outputs.ids != '' }}
    strategy:
      max-parallel: 1
      matrix:
        deployment-identifier: ${{ fromJSON(needs.cleanup-schedule-1.outputs.ids) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/platform-forms-client-apply
          role-session-name: RainbowCleanup
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup triggered by scheduler
        run: ./scripts/clean-up-rainbow-deployment.sh ${{ matrix.deployment-identifier }} ${{ env.LOAD_BALANCER_LISTENER_ARN }} > /dev/null 2>&1
