name: Rainbow deployment (script development)

on:
  pull_request:
    branches:
      - main
      - feature/*
    types:
      - labeled
      - opened
      - reopened
      - synchronize

env:
  AWS_ACCOUNT_ID: ${{ vars.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: ${{ vars.STAGING_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com
  COGNITO_APP_CLIENT_ID: ${{secrets.STAGING_COGNITO_APP_CLIENT_ID}}
  COGNITO_USER_POOL_ID: ${{ secrets.STAGING_COGNITO_USER_POOL_ID}}
  NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: ${{ secrets.STAGING_NEXT_SERVER_ACTIONS_ENCRYPTION_KEY }}
  ROLE_ARN: arn:aws:iam::${{ vars.STAGING_AWS_ACCOUNT_ID }}:role/forms-lambda-client
  LISTENER_ARN: arn:aws:elasticloadbalancing:ca-central-1:${{ vars.STAGING_AWS_ACCOUNT_ID }}:listener/app/form-viewer/5e6bc2d9ab810b68/028e8eeeed9c3a34

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  rainbow-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      # - name: Get second to last release commit identifier
      #   id: get-second-to-last-release
      #   shell: bash
      #   run: echo "commit-id=$(git rev-parse @~)" >> $GITHUB_OUTPUT

      # - name: Checkout
      #   uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      #   with:
      #     ref: ${{ steps.get-second-to-last-release.outputs.commit-id }}

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/platform-forms-client-pr-review-env
          role-session-name: RainbowDeployment
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Staging Amazon ECR
        id: login-ecr-staging
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      # BASE_IMAGE should use the ECS image built for the previous release
      # NEXT_DEPLOYMENT_ID should use right deployment identifier based on whether we are in Staging (git sha) or Production (git tag)
      - name: Build Rainbow Lambda image
        run: |
          docker build -t rainbow \
            -f Dockerfile.rainbow \
            --build-arg BASE_IMAGE=$REGISTRY/forms_app_legacy:ecs \
            --build-arg COGNITO_APP_CLIENT_ID=$COGNITO_APP_CLIENT_ID \
            --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID \
            --build-arg NEXT_DEPLOYMENT_ID=$GITHUB_SHA .

      - name: Tag and Push Rainbow Lambda image
        run: |
          docker tag rainbow $REGISTRY/forms_app_legacy:$GITHUB_SHA
          docker push $REGISTRY/forms_app_legacy:$GITHUB_SHA

      # Could be divided in multiple steps
      # For "aws elbv2 create-target-group" there is a limitation name size (32 characters max)
      # For "aws elbv2 create-rule" we need to find a solution to deal with priority since rules can't have the same one
      - name: Rainbow magic
        run: |
          lambdaArn=$(aws lambda create-function \
            --function-name rainbow-$GITHUB_SHA \
            --package-type Image \
            --role $ROLE_ARN \
            --timeout 15 \
            --memory-size 2048 \
            --code ImageUri=$REGISTRY/forms_app_legacy:$GITHUB_SHA \
            --vpc-config SubnetIds=${{ secrets.PR_REVIEW_ENV_SUBNET_IDS }},SecurityGroupIds=${{ secrets.PR_REVIEW_ENV_SECURITY_GROUP_IDS }} | jq -r ".FunctionArn")

          aws lambda wait function-active --function-name rainbow-$GITHUB_SHA

          aws lambda add-permission \
            --function-name rainbow-$GITHUB_SHA \
            --statement-id elb-invoke-v1 \
            --principal elasticloadbalancing.amazonaws.com \
            --action lambda:InvokeFunction > /dev/null 2>&1

          targetGroupArn=$(aws elbv2 create-target-group \
            --name rainbow-${GITHUB_SHA:0:24} \
            --target-type lambda | jq -r ".TargetGroups[0].TargetGroupArn")

          aws elbv2 register-targets \
            --target-group-arn $targetGroupArn \
            --targets Id=$lambdaArn

          aws elbv2 create-rule \
            --listener-arn $LISTENER_ARN \
            --conditions "[{\"Field\":\"http-header\",\"HttpHeaderConfig\":{\"HttpHeaderName\":\"x-deployment-id\",\"Values\":[\"$GITHUB_SHA\"]}}]" \
            --priority 1 \
            --actions Type=forward,TargetGroupArn=$targetGroupArn \
            --tags Key=Name,Value=rainbow-$GITHUB_SHA > /dev/null 2>&1