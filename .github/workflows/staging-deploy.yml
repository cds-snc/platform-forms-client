name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Staging â€” Push container to ECR"]
    types:
      - completed

env:
  AWS_ACCOUNT_ID: ${{ vars.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1

permissions:
  id-token: write
  contents: read

jobs:
  unable-to-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack if ECR build/push failed
        env:
          WORKFLOW_URL: "${{ github.event.workflow_run.html_url }}"
          WORKFLOW_NAME: "${{ github.event.workflow_run.name }}"
        run: |
          json='{"channel":"#forms-staging-events", "blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: GitHub workflow failure: <${{ env.WORKFLOW_URL }}|${{ env.WORKFLOW_NAME }}>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.STAGING_SLACK_WEBHOOK }}
          exit 1

  deploy-form-viewer-service:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/platform-forms-client-apply
          role-session-name: ECSDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Rainbow deployment
        uses: ./.github/workflows/rainbow-deployment
        with:
          deployment-identifier: ${{ github.sha }}
          ecr-registry-uri: ${{ steps.login-ecr.outputs.registry }}
          ecr-registry-form-viewer-repository-name: form_viewer_staging
          cognito-app-client-id: ${{ secrets.STAGING_COGNITO_APP_CLIENT_ID }}
          cognito-user-pool-id: ${{ secrets.STAGING_COGNITO_USER_POOL_ID }}
          load-balancer-listener-arn: ${{ vars.STAGING_LOAD_BALANCER_LISTENER_ARN }}
          forms-lambda-client-role-arn: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-lambda-client
          forms-lambda-client-subnet-ids: ${{ secrets.STAGING_FORMS_LAMBDA_CLIENT_SUBNET_IDS }}
          forms-lambda-client-security-group-ids: ${{ secrets.STAGING_FORMS_LAMBDA_CLIENT_SECURITY_GROUP_IDS }}
          hostname: forms-staging.cdssandbox.xyz

      - name: Download Form Viewer task definition
        id: download-taskdef-form-viewer
        run: |
          aws ecs describe-task-definition --task-definition form-viewer --query taskDefinition > form_viewer.json
          echo "container_name=$(jq -r '.containerDefinitions[1].name' form_viewer.json)" >> "$GITHUB_OUTPUT"

      - name: Render image for form viewer service
        id: taskdef-form-viewer
        # v1.0.10
        uses: aws-actions/amazon-ecs-render-task-definition@6066ad55cb337fe9c98d146e0afedd2b9285133c
        with:
          task-definition: form_viewer.json
          container-name: ${{ steps.download-taskdef-form-viewer.outputs.container_name }}
          image: ${{ steps.login-ecr.outputs.registry }}/form_viewer_staging:${{ github.event.workflow_run.head_sha }}

      - name: Render appspec for form viewer service
        run: |
          CONTAINER_PORT=`jq '.containerDefinitions[1].portMappings[0].containerPort' form_viewer.json`
          CONTAINER_NAME=${{ steps.download-taskdef-form-viewer.outputs.container_name }}
          TASKDEF_ARN=`jq -r '.taskDefinitionArn' form_viewer.json | cut -f 1-6 -d "/"`
          jq  --argjson port "$CONTAINER_PORT" --arg cname "$CONTAINER_NAME" --arg taskdefarn "$TASKDEF_ARN" '.Resources[0].TargetService.Properties.TaskDefinition = $taskdefarn | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerName = $cname | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerPort = $port' config/infrastructure/aws/appspec-template.json > form-viewer-appspec.json

      - name: Prisma Filter
        id: prisma-filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          # We include the ./seeds/** directory to trigger the workflow when a seed file is added or modified
          filters: |
            prisma:
              - 'prisma/migrations/**'
              - 'prisma/schema.prisma'
              - 'prisma/seeds/**'

      - name: Run Prisma Migrations
        if: steps.prisma-filter.outputs.prisma == 'true'
        id: prisma-migration
        uses: ./.github/workflows/prisma-migration
        with:
          aws-account-id: ${{ env.AWS_ACCOUNT_ID }}
          aws-region: ${{ env.AWS_REGION }}
          app-env: staging

      - name: Deploy image for Form Viewer
        timeout-minutes: 10
        # v1.4.11
        uses: aws-actions/amazon-ecs-deploy-task-definition@1beffbdddb3eb5f83c7a746c3e9bafeccdccbbaa
        with:
          task-definition: ${{ steps.taskdef-form-viewer.outputs.task-definition }}
          service: form-viewer
          cluster: Forms
          wait-for-service-stability: true
          codedeploy-appspec: ${{ github.workspace }}/form-viewer-appspec.json

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Report deployment to Sentinel
        if: always()
        uses: cds-snc/sentinel-forward-data-action@main
        with:
          input_data: '{"product": "forms", "sha": "${{ github.sha }}", "version": "${{ github.sha }}", "repository": "${{ github.repository }}", "environment": "staging", "status": "${{ job.status }}"}'
          log_type: CDS_Product_Deployment_Data
          log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}
