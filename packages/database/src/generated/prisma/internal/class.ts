/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client";
import type * as Prisma from "./prismaNamespace.js";

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client",
    },
    output: {
      value: "/Users/bryan.robitaille/repos/forms-client/packages/database/src/generated/prisma",
      fromEnvVar: null,
    },
    config: {
      engineType: "client",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "darwin-arm64",
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      "/Users/bryan.robitaille/repos/forms-client/packages/database/prisma/schema.prisma",
    isCustomOutput: true,
  },
  relativePath: "../../../prisma",
  clientVersion: "6.17.0",
  engineVersion: "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider   = "prisma-client"\n  output     = "../src/generated/prisma"\n  engineType = "client"\n}\n\ndatasource db {\n  url      = env("DATABASE_URL")\n  provider = "postgresql"\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel ApiServiceAccount {\n  id          String   @id\n  created_at  DateTime @default(now()) @db.Timestamptz(6)\n  updated_at  DateTime @updatedAt @db.Timestamptz(6)\n  templateId  String   @unique\n  publicKeyId String   @unique\n  publicKey   String   @unique\n  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  userId       String\n  expires      DateTime\n  sessionToken String   @unique(map: "session_token")\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n}\n\nmodel Template {\n  id                    String             @id @default(cuid())\n  created_at            DateTime           @default(now()) @db.Timestamptz(6)\n  updated_at            DateTime           @updatedAt @db.Timestamptz(6)\n  name                  String             @default("")\n  jsonConfig            Json\n  isPublished           Boolean            @default(false)\n  formPurpose           String             @default("")\n  publishReason         String             @default("")\n  publishFormType       String             @default("")\n  publishDesc           String             @default("")\n  deliveryOption        DeliveryOption?\n  apiServiceAccount     ApiServiceAccount?\n  securityAttribute     String             @default("Protected A")\n  // @todo  Need to remove this field\n  bearerToken           String?\n  ttl                   DateTime?\n  users                 User[]\n  closingDate           DateTime?          @db.Timestamptz(6)\n  closedDetails         Json?\n  saveAndResume         Boolean            @default(true)\n  invitations           Invitation[]\n  notificationsInterval Int?               @default(1440)\n  notificationsUsers    User[]             @relation("TemplateNotificationsUsers")\n}\n\nmodel DeliveryOption {\n  id             String   @id @default(cuid())\n  emailAddress   String\n  emailSubjectEn String?\n  emailSubjectFr String?\n  templateId     String   @unique\n  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n}\n\nmodel Privilege {\n  id            String  @id @default(cuid())\n  name          String  @unique\n  descriptionEn String?\n  descriptionFr String?\n  permissions   Json\n  priority      Int\n  users         User[]\n}\n\nmodel User {\n  id                     String           @id @default(cuid())\n  name                   String?\n  email                  String           @unique\n  image                  String?\n  emailVerified          DateTime?\n  lastLogin              DateTime         @default(now()) @db.Timestamptz(6)\n  active                 Boolean          @default(true)\n  privileges             Privilege[]\n  accounts               Account[]\n  sessions               Session[]\n  templates              Template[]\n  securityAnswers        SecurityAnswer[]\n  notes                  String?\n  createdAt              DateTime         @default(now()) @db.Timestamptz(6)\n  invitations            Invitation[]\n  features               UserFeature[]\n  notificationsTemplates Template[]       @relation("TemplateNotificationsUsers")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Setting {\n  internalId    String  @id\n  nameEn        String\n  nameFr        String\n  descriptionEn String?\n  descriptionFr String?\n  value         String?\n}\n\nmodel CognitoCustom2FA {\n  id               String   @id @default(cuid())\n  email            String   @unique\n  cognitoToken     String\n  verificationCode String   @unique\n  expires          DateTime\n\n  @@unique([id, email])\n}\n\nmodel SecurityQuestion {\n  id             String           @id @default(cuid())\n  questionEn     String           @unique\n  questionFr     String           @unique\n  deprecated     Boolean          @default(false)\n  securityAnswer SecurityAnswer[]\n}\n\nmodel SecurityAnswer {\n  id                 String           @id @default(cuid())\n  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  question           SecurityQuestion @relation(fields: [securityQuestionId], references: [id], onDelete: Cascade)\n  answer             String\n  userId             String\n  securityQuestionId String\n}\n\nmodel MagicLink {\n  identifier String   @unique\n  token      String   @unique\n  expires    DateTime\n}\n\nmodel Invitation {\n  id         String   @id @default(cuid())\n  email      String\n  expires    DateTime\n  templateId String\n  invitedBy  String?\n  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user       User?    @relation(fields: [invitedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@unique([email, templateId])\n}\n\nmodel UserFeature {\n  id      String @id @default(cuid())\n  userId  String\n  feature String // Must match a key from FeatureFlags in code\n  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, feature])\n}\n',
  inlineSchemaHash: "f71eb07ecbb793940d4a55fd3de9b18ca26a43e16ceb2d8c05bc74e1fdbcc8ea",
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: "",
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"provider","kind":"scalar","type":"String"},{"name":"providerAccountId","kind":"scalar","type":"String"},{"name":"refresh_token","kind":"scalar","type":"String"},{"name":"access_token","kind":"scalar","type":"String"},{"name":"expires_at","kind":"scalar","type":"Int"},{"name":"token_type","kind":"scalar","type":"String"},{"name":"scope","kind":"scalar","type":"String"},{"name":"id_token","kind":"scalar","type":"String"},{"name":"session_state","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"}],"dbName":null},"ApiServiceAccount":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"created_at","kind":"scalar","type":"DateTime"},{"name":"updated_at","kind":"scalar","type":"DateTime"},{"name":"templateId","kind":"scalar","type":"String"},{"name":"publicKeyId","kind":"scalar","type":"String"},{"name":"publicKey","kind":"scalar","type":"String"},{"name":"template","kind":"object","type":"Template","relationName":"ApiServiceAccountToTemplate"}],"dbName":null},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"sessionToken","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"}],"dbName":null},"Template":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"created_at","kind":"scalar","type":"DateTime"},{"name":"updated_at","kind":"scalar","type":"DateTime"},{"name":"name","kind":"scalar","type":"String"},{"name":"jsonConfig","kind":"scalar","type":"Json"},{"name":"isPublished","kind":"scalar","type":"Boolean"},{"name":"formPurpose","kind":"scalar","type":"String"},{"name":"publishReason","kind":"scalar","type":"String"},{"name":"publishFormType","kind":"scalar","type":"String"},{"name":"publishDesc","kind":"scalar","type":"String"},{"name":"deliveryOption","kind":"object","type":"DeliveryOption","relationName":"DeliveryOptionToTemplate"},{"name":"apiServiceAccount","kind":"object","type":"ApiServiceAccount","relationName":"ApiServiceAccountToTemplate"},{"name":"securityAttribute","kind":"scalar","type":"String"},{"name":"bearerToken","kind":"scalar","type":"String"},{"name":"ttl","kind":"scalar","type":"DateTime"},{"name":"users","kind":"object","type":"User","relationName":"TemplateToUser"},{"name":"closingDate","kind":"scalar","type":"DateTime"},{"name":"closedDetails","kind":"scalar","type":"Json"},{"name":"saveAndResume","kind":"scalar","type":"Boolean"},{"name":"invitations","kind":"object","type":"Invitation","relationName":"InvitationToTemplate"},{"name":"notificationsInterval","kind":"scalar","type":"Int"},{"name":"notificationsUsers","kind":"object","type":"User","relationName":"TemplateNotificationsUsers"}],"dbName":null},"DeliveryOption":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"emailAddress","kind":"scalar","type":"String"},{"name":"emailSubjectEn","kind":"scalar","type":"String"},{"name":"emailSubjectFr","kind":"scalar","type":"String"},{"name":"templateId","kind":"scalar","type":"String"},{"name":"template","kind":"object","type":"Template","relationName":"DeliveryOptionToTemplate"}],"dbName":null},"Privilege":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"descriptionEn","kind":"scalar","type":"String"},{"name":"descriptionFr","kind":"scalar","type":"String"},{"name":"permissions","kind":"scalar","type":"Json"},{"name":"priority","kind":"scalar","type":"Int"},{"name":"users","kind":"object","type":"User","relationName":"PrivilegeToUser"}],"dbName":null},"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"image","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"DateTime"},{"name":"lastLogin","kind":"scalar","type":"DateTime"},{"name":"active","kind":"scalar","type":"Boolean"},{"name":"privileges","kind":"object","type":"Privilege","relationName":"PrivilegeToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"templates","kind":"object","type":"Template","relationName":"TemplateToUser"},{"name":"securityAnswers","kind":"object","type":"SecurityAnswer","relationName":"SecurityAnswerToUser"},{"name":"notes","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"invitations","kind":"object","type":"Invitation","relationName":"InvitationToUser"},{"name":"features","kind":"object","type":"UserFeature","relationName":"UserToUserFeature"},{"name":"notificationsTemplates","kind":"object","type":"Template","relationName":"TemplateNotificationsUsers"}],"dbName":null},"VerificationToken":{"fields":[{"name":"identifier","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"}],"dbName":null},"Setting":{"fields":[{"name":"internalId","kind":"scalar","type":"String"},{"name":"nameEn","kind":"scalar","type":"String"},{"name":"nameFr","kind":"scalar","type":"String"},{"name":"descriptionEn","kind":"scalar","type":"String"},{"name":"descriptionFr","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"}],"dbName":null},"CognitoCustom2FA":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"cognitoToken","kind":"scalar","type":"String"},{"name":"verificationCode","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"}],"dbName":null},"SecurityQuestion":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"questionEn","kind":"scalar","type":"String"},{"name":"questionFr","kind":"scalar","type":"String"},{"name":"deprecated","kind":"scalar","type":"Boolean"},{"name":"securityAnswer","kind":"object","type":"SecurityAnswer","relationName":"SecurityAnswerToSecurityQuestion"}],"dbName":null},"SecurityAnswer":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SecurityAnswerToUser"},{"name":"question","kind":"object","type":"SecurityQuestion","relationName":"SecurityAnswerToSecurityQuestion"},{"name":"answer","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"securityQuestionId","kind":"scalar","type":"String"}],"dbName":null},"MagicLink":{"fields":[{"name":"identifier","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"}],"dbName":null},"Invitation":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"templateId","kind":"scalar","type":"String"},{"name":"invitedBy","kind":"scalar","type":"String"},{"name":"template","kind":"object","type":"Template","relationName":"InvitationToTemplate"},{"name":"user","kind":"object","type":"User","relationName":"InvitationToUser"}],"dbName":null},"UserFeature":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"feature","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserFeature"}],"dbName":null}},"enums":{},"types":{}}'
);
config.engineWasm = undefined;

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import("node:buffer");
  const wasmArray = Buffer.from(wasmBase64, "base64");
  return new WebAssembly.Module(wasmArray);
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import(
      "@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs"
    );
    return await decodeBase64AsWasm(wasm);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  "log" extends keyof ClientOptions
    ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions["log"]>
      : never
    : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions["omit"] = Options extends { omit: infer U }
      ? U
      : Prisma.PrismaClientOptions["omit"],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<Options, Prisma.PrismaClientOptions>
  ): PrismaClient<LogOpts, OmitOpts, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions["omit"] = Prisma.PrismaClientOptions["omit"],
  in out ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  $on<V extends LogOpts>(
    eventType: V,
    callback: (event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent) => void
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    }
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    "extends",
    Prisma.TypeMapCb<OmitOpts>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<OmitOpts>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   */
  get account(): Prisma.AccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.apiServiceAccount`: Exposes CRUD operations for the **ApiServiceAccount** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ApiServiceAccounts
   * const apiServiceAccounts = await prisma.apiServiceAccount.findMany()
   * ```
   */
  get apiServiceAccount(): Prisma.ApiServiceAccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.template`: Exposes CRUD operations for the **Template** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Templates
   * const templates = await prisma.template.findMany()
   * ```
   */
  get template(): Prisma.TemplateDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.deliveryOption`: Exposes CRUD operations for the **DeliveryOption** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DeliveryOptions
   * const deliveryOptions = await prisma.deliveryOption.findMany()
   * ```
   */
  get deliveryOption(): Prisma.DeliveryOptionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.privilege`: Exposes CRUD operations for the **Privilege** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Privileges
   * const privileges = await prisma.privilege.findMany()
   * ```
   */
  get privilege(): Prisma.PrivilegeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more VerificationTokens
   * const verificationTokens = await prisma.verificationToken.findMany()
   * ```
   */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Settings
   * const settings = await prisma.setting.findMany()
   * ```
   */
  get setting(): Prisma.SettingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.cognitoCustom2FA`: Exposes CRUD operations for the **CognitoCustom2FA** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CognitoCustom2FAS
   * const cognitoCustom2FAS = await prisma.cognitoCustom2FA.findMany()
   * ```
   */
  get cognitoCustom2FA(): Prisma.CognitoCustom2FADelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.securityQuestion`: Exposes CRUD operations for the **SecurityQuestion** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SecurityQuestions
   * const securityQuestions = await prisma.securityQuestion.findMany()
   * ```
   */
  get securityQuestion(): Prisma.SecurityQuestionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.securityAnswer`: Exposes CRUD operations for the **SecurityAnswer** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SecurityAnswers
   * const securityAnswers = await prisma.securityAnswer.findMany()
   * ```
   */
  get securityAnswer(): Prisma.SecurityAnswerDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.magicLink`: Exposes CRUD operations for the **MagicLink** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MagicLinks
   * const magicLinks = await prisma.magicLink.findMany()
   * ```
   */
  get magicLink(): Prisma.MagicLinkDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Invitations
   * const invitations = await prisma.invitation.findMany()
   * ```
   */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userFeature`: Exposes CRUD operations for the **UserFeature** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserFeatures
   * const userFeatures = await prisma.userFeature.findMany()
   * ```
   */
  get userFeature(): Prisma.UserFeatureDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
