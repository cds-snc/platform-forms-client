/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client";
import type * as Prisma from "../models.js";
import { type PrismaClient } from "./class.js";

export type * from "../models.js";

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>;
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>;
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
export const prismaVersion: PrismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? "Please either choose `select` or `include`."
  : T extends SelectAndOmit
    ? "Please either choose `select` or `omit`."
    : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
  ? U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : U
  : T;

/**
 * Is T a Record?
 */
type IsObject<T extends any> =
  T extends Array<any>
    ? False
    : T extends Date
      ? False
      : T extends Uint8Array
        ? False
        : T extends BigInt
          ? False
          : T extends object
            ? True
            : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
  ? _Either<O, K, strict>
  : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown
  ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
  : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0;

export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<T, U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">> =
  IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<Or<Extends<"OR", K>, Extends<"AND", K>>, Extends<"NOT", K>> extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<
  T,
  MaybeTupleToUnion<K>
>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;

export const ModelName = {
  Account: "Account",
  ApiServiceAccount: "ApiServiceAccount",
  Session: "Session",
  Template: "Template",
  DeliveryOption: "DeliveryOption",
  Privilege: "Privilege",
  User: "User",
  VerificationToken: "VerificationToken",
  Setting: "Setting",
  CognitoCustom2FA: "CognitoCustom2FA",
  SecurityQuestion: "SecurityQuestion",
  SecurityAnswer: "SecurityAnswer",
  MagicLink: "MagicLink",
  Invitation: "Invitation",
  UserFeature: "UserFeature",
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<GlobalOmitOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this["params"]["extArgs"], GlobalOmitOptions>;
}

export type TypeMap<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | "account"
      | "apiServiceAccount"
      | "session"
      | "template"
      | "deliveryOption"
      | "privilege"
      | "user"
      | "verificationToken"
      | "setting"
      | "cognitoCustom2FA"
      | "securityQuestion"
      | "securityAnswer"
      | "magicLink"
      | "invitation"
      | "userFeature";
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>;
      fields: Prisma.AccountFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
        };
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number;
        };
      };
    };
    ApiServiceAccount: {
      payload: Prisma.$ApiServiceAccountPayload<ExtArgs>;
      fields: Prisma.ApiServiceAccountFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ApiServiceAccountFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ApiServiceAccountFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        findFirst: {
          args: Prisma.ApiServiceAccountFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ApiServiceAccountFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        findMany: {
          args: Prisma.ApiServiceAccountFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>[];
        };
        create: {
          args: Prisma.ApiServiceAccountCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        createMany: {
          args: Prisma.ApiServiceAccountCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ApiServiceAccountCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>[];
        };
        delete: {
          args: Prisma.ApiServiceAccountDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        update: {
          args: Prisma.ApiServiceAccountUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        deleteMany: {
          args: Prisma.ApiServiceAccountDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ApiServiceAccountUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ApiServiceAccountUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>[];
        };
        upsert: {
          args: Prisma.ApiServiceAccountUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiServiceAccountPayload>;
        };
        aggregate: {
          args: Prisma.ApiServiceAccountAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApiServiceAccount>;
        };
        groupBy: {
          args: Prisma.ApiServiceAccountGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ApiServiceAccountGroupByOutputType>[];
        };
        count: {
          args: Prisma.ApiServiceAccountCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ApiServiceAccountCountAggregateOutputType>
            | number;
        };
      };
    };
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>;
      fields: Prisma.SessionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>;
        };
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[];
        };
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number;
        };
      };
    };
    Template: {
      payload: Prisma.$TemplatePayload<ExtArgs>;
      fields: Prisma.TemplateFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TemplateFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TemplateFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        findFirst: {
          args: Prisma.TemplateFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TemplateFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        findMany: {
          args: Prisma.TemplateFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>[];
        };
        create: {
          args: Prisma.TemplateCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        createMany: {
          args: Prisma.TemplateCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TemplateCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>[];
        };
        delete: {
          args: Prisma.TemplateDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        update: {
          args: Prisma.TemplateUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        deleteMany: {
          args: Prisma.TemplateDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TemplateUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TemplateUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>[];
        };
        upsert: {
          args: Prisma.TemplateUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TemplatePayload>;
        };
        aggregate: {
          args: Prisma.TemplateAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTemplate>;
        };
        groupBy: {
          args: Prisma.TemplateGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TemplateGroupByOutputType>[];
        };
        count: {
          args: Prisma.TemplateCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TemplateCountAggregateOutputType> | number;
        };
      };
    };
    DeliveryOption: {
      payload: Prisma.$DeliveryOptionPayload<ExtArgs>;
      fields: Prisma.DeliveryOptionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DeliveryOptionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DeliveryOptionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        findFirst: {
          args: Prisma.DeliveryOptionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DeliveryOptionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        findMany: {
          args: Prisma.DeliveryOptionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>[];
        };
        create: {
          args: Prisma.DeliveryOptionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        createMany: {
          args: Prisma.DeliveryOptionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DeliveryOptionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>[];
        };
        delete: {
          args: Prisma.DeliveryOptionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        update: {
          args: Prisma.DeliveryOptionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        deleteMany: {
          args: Prisma.DeliveryOptionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DeliveryOptionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DeliveryOptionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>[];
        };
        upsert: {
          args: Prisma.DeliveryOptionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeliveryOptionPayload>;
        };
        aggregate: {
          args: Prisma.DeliveryOptionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDeliveryOption>;
        };
        groupBy: {
          args: Prisma.DeliveryOptionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DeliveryOptionGroupByOutputType>[];
        };
        count: {
          args: Prisma.DeliveryOptionCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.DeliveryOptionCountAggregateOutputType>
            | number;
        };
      };
    };
    Privilege: {
      payload: Prisma.$PrivilegePayload<ExtArgs>;
      fields: Prisma.PrivilegeFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.PrivilegeFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.PrivilegeFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        findFirst: {
          args: Prisma.PrivilegeFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.PrivilegeFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        findMany: {
          args: Prisma.PrivilegeFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>[];
        };
        create: {
          args: Prisma.PrivilegeCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        createMany: {
          args: Prisma.PrivilegeCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.PrivilegeCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>[];
        };
        delete: {
          args: Prisma.PrivilegeDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        update: {
          args: Prisma.PrivilegeUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        deleteMany: {
          args: Prisma.PrivilegeDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.PrivilegeUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.PrivilegeUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>[];
        };
        upsert: {
          args: Prisma.PrivilegeUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrivilegePayload>;
        };
        aggregate: {
          args: Prisma.PrivilegeAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregatePrivilege>;
        };
        groupBy: {
          args: Prisma.PrivilegeGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PrivilegeGroupByOutputType>[];
        };
        count: {
          args: Prisma.PrivilegeCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PrivilegeCountAggregateOutputType> | number;
        };
      };
    };
    User: {
      payload: Prisma.$UserPayload<ExtArgs>;
      fields: Prisma.UserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
        };
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number;
        };
      };
    };
    VerificationToken: {
      payload: Prisma.$VerificationTokenPayload<ExtArgs>;
      fields: Prisma.VerificationTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        findFirst: {
          args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        findMany: {
          args: Prisma.VerificationTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        create: {
          args: Prisma.VerificationTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        createMany: {
          args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        delete: {
          args: Prisma.VerificationTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        update: {
          args: Prisma.VerificationTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        deleteMany: {
          args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        upsert: {
          args: Prisma.VerificationTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        aggregate: {
          args: Prisma.VerificationTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerificationToken>;
        };
        groupBy: {
          args: Prisma.VerificationTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerificationTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.VerificationTokenCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.VerificationTokenCountAggregateOutputType>
            | number;
        };
      };
    };
    Setting: {
      payload: Prisma.$SettingPayload<ExtArgs>;
      fields: Prisma.SettingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SettingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        findFirst: {
          args: Prisma.SettingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        findMany: {
          args: Prisma.SettingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[];
        };
        create: {
          args: Prisma.SettingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        createMany: {
          args: Prisma.SettingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[];
        };
        delete: {
          args: Prisma.SettingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        update: {
          args: Prisma.SettingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        deleteMany: {
          args: Prisma.SettingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SettingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SettingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[];
        };
        upsert: {
          args: Prisma.SettingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>;
        };
        aggregate: {
          args: Prisma.SettingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSetting>;
        };
        groupBy: {
          args: Prisma.SettingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SettingGroupByOutputType>[];
        };
        count: {
          args: Prisma.SettingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SettingCountAggregateOutputType> | number;
        };
      };
    };
    CognitoCustom2FA: {
      payload: Prisma.$CognitoCustom2FAPayload<ExtArgs>;
      fields: Prisma.CognitoCustom2FAFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CognitoCustom2FAFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CognitoCustom2FAFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        findFirst: {
          args: Prisma.CognitoCustom2FAFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CognitoCustom2FAFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        findMany: {
          args: Prisma.CognitoCustom2FAFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>[];
        };
        create: {
          args: Prisma.CognitoCustom2FACreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        createMany: {
          args: Prisma.CognitoCustom2FACreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CognitoCustom2FACreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>[];
        };
        delete: {
          args: Prisma.CognitoCustom2FADeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        update: {
          args: Prisma.CognitoCustom2FAUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        deleteMany: {
          args: Prisma.CognitoCustom2FADeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CognitoCustom2FAUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CognitoCustom2FAUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>[];
        };
        upsert: {
          args: Prisma.CognitoCustom2FAUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CognitoCustom2FAPayload>;
        };
        aggregate: {
          args: Prisma.CognitoCustom2FAAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCognitoCustom2FA>;
        };
        groupBy: {
          args: Prisma.CognitoCustom2FAGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CognitoCustom2FAGroupByOutputType>[];
        };
        count: {
          args: Prisma.CognitoCustom2FACountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.CognitoCustom2FACountAggregateOutputType>
            | number;
        };
      };
    };
    SecurityQuestion: {
      payload: Prisma.$SecurityQuestionPayload<ExtArgs>;
      fields: Prisma.SecurityQuestionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SecurityQuestionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SecurityQuestionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        findFirst: {
          args: Prisma.SecurityQuestionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SecurityQuestionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        findMany: {
          args: Prisma.SecurityQuestionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>[];
        };
        create: {
          args: Prisma.SecurityQuestionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        createMany: {
          args: Prisma.SecurityQuestionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SecurityQuestionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>[];
        };
        delete: {
          args: Prisma.SecurityQuestionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        update: {
          args: Prisma.SecurityQuestionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        deleteMany: {
          args: Prisma.SecurityQuestionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SecurityQuestionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SecurityQuestionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>[];
        };
        upsert: {
          args: Prisma.SecurityQuestionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityQuestionPayload>;
        };
        aggregate: {
          args: Prisma.SecurityQuestionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecurityQuestion>;
        };
        groupBy: {
          args: Prisma.SecurityQuestionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SecurityQuestionGroupByOutputType>[];
        };
        count: {
          args: Prisma.SecurityQuestionCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.SecurityQuestionCountAggregateOutputType>
            | number;
        };
      };
    };
    SecurityAnswer: {
      payload: Prisma.$SecurityAnswerPayload<ExtArgs>;
      fields: Prisma.SecurityAnswerFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SecurityAnswerFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SecurityAnswerFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        findFirst: {
          args: Prisma.SecurityAnswerFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SecurityAnswerFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        findMany: {
          args: Prisma.SecurityAnswerFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>[];
        };
        create: {
          args: Prisma.SecurityAnswerCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        createMany: {
          args: Prisma.SecurityAnswerCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SecurityAnswerCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>[];
        };
        delete: {
          args: Prisma.SecurityAnswerDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        update: {
          args: Prisma.SecurityAnswerUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        deleteMany: {
          args: Prisma.SecurityAnswerDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SecurityAnswerUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SecurityAnswerUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>[];
        };
        upsert: {
          args: Prisma.SecurityAnswerUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecurityAnswerPayload>;
        };
        aggregate: {
          args: Prisma.SecurityAnswerAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecurityAnswer>;
        };
        groupBy: {
          args: Prisma.SecurityAnswerGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SecurityAnswerGroupByOutputType>[];
        };
        count: {
          args: Prisma.SecurityAnswerCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.SecurityAnswerCountAggregateOutputType>
            | number;
        };
      };
    };
    MagicLink: {
      payload: Prisma.$MagicLinkPayload<ExtArgs>;
      fields: Prisma.MagicLinkFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MagicLinkFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MagicLinkFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        findFirst: {
          args: Prisma.MagicLinkFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MagicLinkFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        findMany: {
          args: Prisma.MagicLinkFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>[];
        };
        create: {
          args: Prisma.MagicLinkCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        createMany: {
          args: Prisma.MagicLinkCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MagicLinkCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>[];
        };
        delete: {
          args: Prisma.MagicLinkDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        update: {
          args: Prisma.MagicLinkUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        deleteMany: {
          args: Prisma.MagicLinkDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MagicLinkUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MagicLinkUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>[];
        };
        upsert: {
          args: Prisma.MagicLinkUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MagicLinkPayload>;
        };
        aggregate: {
          args: Prisma.MagicLinkAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMagicLink>;
        };
        groupBy: {
          args: Prisma.MagicLinkGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MagicLinkGroupByOutputType>[];
        };
        count: {
          args: Prisma.MagicLinkCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MagicLinkCountAggregateOutputType> | number;
        };
      };
    };
    Invitation: {
      payload: Prisma.$InvitationPayload<ExtArgs>;
      fields: Prisma.InvitationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InvitationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        findFirst: {
          args: Prisma.InvitationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        findMany: {
          args: Prisma.InvitationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[];
        };
        create: {
          args: Prisma.InvitationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        createMany: {
          args: Prisma.InvitationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[];
        };
        delete: {
          args: Prisma.InvitationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        update: {
          args: Prisma.InvitationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        deleteMany: {
          args: Prisma.InvitationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InvitationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[];
        };
        upsert: {
          args: Prisma.InvitationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>;
        };
        aggregate: {
          args: Prisma.InvitationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvitation>;
        };
        groupBy: {
          args: Prisma.InvitationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InvitationGroupByOutputType>[];
        };
        count: {
          args: Prisma.InvitationCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InvitationCountAggregateOutputType> | number;
        };
      };
    };
    UserFeature: {
      payload: Prisma.$UserFeaturePayload<ExtArgs>;
      fields: Prisma.UserFeatureFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFeatureFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFeatureFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        findFirst: {
          args: Prisma.UserFeatureFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFeatureFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        findMany: {
          args: Prisma.UserFeatureFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>[];
        };
        create: {
          args: Prisma.UserFeatureCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        createMany: {
          args: Prisma.UserFeatureCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserFeatureCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>[];
        };
        delete: {
          args: Prisma.UserFeatureDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        update: {
          args: Prisma.UserFeatureUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        deleteMany: {
          args: Prisma.UserFeatureDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserFeatureUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserFeatureUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>[];
        };
        upsert: {
          args: Prisma.UserFeatureUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturePayload>;
        };
        aggregate: {
          args: Prisma.UserFeatureAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserFeature>;
        };
        groupBy: {
          args: Prisma.UserFeatureGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserFeatureGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserFeatureCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserFeatureCountAggregateOutputType> | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
} as const);

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const AccountScalarFieldEnum = {
  id: "id",
  userId: "userId",
  type: "type",
  provider: "provider",
  providerAccountId: "providerAccountId",
  refresh_token: "refresh_token",
  access_token: "access_token",
  expires_at: "expires_at",
  token_type: "token_type",
  scope: "scope",
  id_token: "id_token",
  session_state: "session_state",
} as const;

export type AccountScalarFieldEnum =
  (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const ApiServiceAccountScalarFieldEnum = {
  id: "id",
  created_at: "created_at",
  updated_at: "updated_at",
  templateId: "templateId",
  publicKeyId: "publicKeyId",
  publicKey: "publicKey",
} as const;

export type ApiServiceAccountScalarFieldEnum =
  (typeof ApiServiceAccountScalarFieldEnum)[keyof typeof ApiServiceAccountScalarFieldEnum];

export const SessionScalarFieldEnum = {
  id: "id",
  userId: "userId",
  expires: "expires",
  sessionToken: "sessionToken",
} as const;

export type SessionScalarFieldEnum =
  (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

export const TemplateScalarFieldEnum = {
  id: "id",
  created_at: "created_at",
  updated_at: "updated_at",
  name: "name",
  jsonConfig: "jsonConfig",
  isPublished: "isPublished",
  formPurpose: "formPurpose",
  publishReason: "publishReason",
  publishFormType: "publishFormType",
  publishDesc: "publishDesc",
  securityAttribute: "securityAttribute",
  bearerToken: "bearerToken",
  ttl: "ttl",
  closingDate: "closingDate",
  closedDetails: "closedDetails",
  saveAndResume: "saveAndResume",
  notificationsInterval: "notificationsInterval",
} as const;

export type TemplateScalarFieldEnum =
  (typeof TemplateScalarFieldEnum)[keyof typeof TemplateScalarFieldEnum];

export const DeliveryOptionScalarFieldEnum = {
  id: "id",
  emailAddress: "emailAddress",
  emailSubjectEn: "emailSubjectEn",
  emailSubjectFr: "emailSubjectFr",
  templateId: "templateId",
} as const;

export type DeliveryOptionScalarFieldEnum =
  (typeof DeliveryOptionScalarFieldEnum)[keyof typeof DeliveryOptionScalarFieldEnum];

export const PrivilegeScalarFieldEnum = {
  id: "id",
  name: "name",
  descriptionEn: "descriptionEn",
  descriptionFr: "descriptionFr",
  permissions: "permissions",
  priority: "priority",
} as const;

export type PrivilegeScalarFieldEnum =
  (typeof PrivilegeScalarFieldEnum)[keyof typeof PrivilegeScalarFieldEnum];

export const UserScalarFieldEnum = {
  id: "id",
  name: "name",
  email: "email",
  image: "image",
  emailVerified: "emailVerified",
  lastLogin: "lastLogin",
  active: "active",
  notes: "notes",
  createdAt: "createdAt",
} as const;

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const VerificationTokenScalarFieldEnum = {
  identifier: "identifier",
  token: "token",
  expires: "expires",
} as const;

export type VerificationTokenScalarFieldEnum =
  (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum];

export const SettingScalarFieldEnum = {
  internalId: "internalId",
  nameEn: "nameEn",
  nameFr: "nameFr",
  descriptionEn: "descriptionEn",
  descriptionFr: "descriptionFr",
  value: "value",
} as const;

export type SettingScalarFieldEnum =
  (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum];

export const CognitoCustom2FAScalarFieldEnum = {
  id: "id",
  email: "email",
  cognitoToken: "cognitoToken",
  verificationCode: "verificationCode",
  expires: "expires",
} as const;

export type CognitoCustom2FAScalarFieldEnum =
  (typeof CognitoCustom2FAScalarFieldEnum)[keyof typeof CognitoCustom2FAScalarFieldEnum];

export const SecurityQuestionScalarFieldEnum = {
  id: "id",
  questionEn: "questionEn",
  questionFr: "questionFr",
  deprecated: "deprecated",
} as const;

export type SecurityQuestionScalarFieldEnum =
  (typeof SecurityQuestionScalarFieldEnum)[keyof typeof SecurityQuestionScalarFieldEnum];

export const SecurityAnswerScalarFieldEnum = {
  id: "id",
  answer: "answer",
  userId: "userId",
  securityQuestionId: "securityQuestionId",
} as const;

export type SecurityAnswerScalarFieldEnum =
  (typeof SecurityAnswerScalarFieldEnum)[keyof typeof SecurityAnswerScalarFieldEnum];

export const MagicLinkScalarFieldEnum = {
  identifier: "identifier",
  token: "token",
  expires: "expires",
} as const;

export type MagicLinkScalarFieldEnum =
  (typeof MagicLinkScalarFieldEnum)[keyof typeof MagicLinkScalarFieldEnum];

export const InvitationScalarFieldEnum = {
  id: "id",
  email: "email",
  expires: "expires",
  templateId: "templateId",
  invitedBy: "invitedBy",
} as const;

export type InvitationScalarFieldEnum =
  (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum];

export const UserFeatureScalarFieldEnum = {
  id: "id",
  userId: "userId",
  feature: "feature",
} as const;

export type UserFeatureScalarFieldEnum =
  (typeof UserFeatureScalarFieldEnum)[keyof typeof UserFeatureScalarFieldEnum];

export const SortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const JsonNullValueInput = {
  JsonNull: JsonNull,
} as const;

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull,
} as const;

export type NullableJsonNullValueInput =
  (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const QueryMode = {
  default: "default",
  insensitive: "insensitive",
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
  first: "first",
  last: "last",
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "String">;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "String[]">;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Int">;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Int[]">;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "DateTime">;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "DateTime[]">;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Json">;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "QueryMode">;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Boolean">;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Float">;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Float[]">;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions
  .defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  "define",
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = "pretty" | "colorless" | "minimal";
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   *
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   *
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null;
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  account?: Prisma.AccountOmit;
  apiServiceAccount?: Prisma.ApiServiceAccountOmit;
  session?: Prisma.SessionOmit;
  template?: Prisma.TemplateOmit;
  deliveryOption?: Prisma.DeliveryOptionOmit;
  privilege?: Prisma.PrivilegeOmit;
  user?: Prisma.UserOmit;
  verificationToken?: Prisma.VerificationTokenOmit;
  setting?: Prisma.SettingOmit;
  cognitoCustom2FA?: Prisma.CognitoCustom2FAOmit;
  securityQuestion?: Prisma.SecurityQuestionOmit;
  securityAnswer?: Prisma.SecurityAnswerOmit;
  magicLink?: Prisma.MagicLinkOmit;
  invitation?: Prisma.InvitationOmit;
  userFeature?: Prisma.UserFeatureOmit;
};

/* Types for Logging */
export type LogLevel = "info" | "query" | "warn" | "error";
export type LogDefinition = {
  level: LogLevel;
  emit: "stdout" | "event";
};

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<T extends LogDefinition ? T["level"] : T>;

export type GetEvents<T extends any[]> =
  T extends Array<LogLevel | LogDefinition> ? GetLogType<T[number]> : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | "findUnique"
  | "findUniqueOrThrow"
  | "findMany"
  | "findFirst"
  | "findFirstOrThrow"
  | "create"
  | "createMany"
  | "createManyAndReturn"
  | "update"
  | "updateMany"
  | "updateManyAndReturn"
  | "upsert"
  | "delete"
  | "deleteMany"
  | "executeRaw"
  | "queryRaw"
  | "aggregate"
  | "count"
  | "runCommandRaw"
  | "findRaw"
  | "groupBy";

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>;
