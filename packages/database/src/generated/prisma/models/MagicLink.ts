/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `MagicLink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model MagicLink
 *
 */
export type MagicLinkModel = runtime.Types.Result.DefaultSelection<Prisma.$MagicLinkPayload>;

export type AggregateMagicLink = {
  _count: MagicLinkCountAggregateOutputType | null;
  _min: MagicLinkMinAggregateOutputType | null;
  _max: MagicLinkMaxAggregateOutputType | null;
};

export type MagicLinkMinAggregateOutputType = {
  identifier: string | null;
  token: string | null;
  expires: Date | null;
};

export type MagicLinkMaxAggregateOutputType = {
  identifier: string | null;
  token: string | null;
  expires: Date | null;
};

export type MagicLinkCountAggregateOutputType = {
  identifier: number;
  token: number;
  expires: number;
  _all: number;
};

export type MagicLinkMinAggregateInputType = {
  identifier?: true;
  token?: true;
  expires?: true;
};

export type MagicLinkMaxAggregateInputType = {
  identifier?: true;
  token?: true;
  expires?: true;
};

export type MagicLinkCountAggregateInputType = {
  identifier?: true;
  token?: true;
  expires?: true;
  _all?: true;
};

export type MagicLinkAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MagicLink to aggregate.
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MagicLinks to fetch.
   */
  orderBy?: Prisma.MagicLinkOrderByWithRelationInput | Prisma.MagicLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MagicLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MagicLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MagicLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MagicLinks
   **/
  _count?: true | MagicLinkCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MagicLinkMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MagicLinkMaxAggregateInputType;
};

export type GetMagicLinkAggregateType<T extends MagicLinkAggregateArgs> = {
  [P in keyof T & keyof AggregateMagicLink]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMagicLink[P]>
    : Prisma.GetScalarType<T[P], AggregateMagicLink[P]>;
};

export type MagicLinkGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MagicLinkWhereInput;
  orderBy?:
    | Prisma.MagicLinkOrderByWithAggregationInput
    | Prisma.MagicLinkOrderByWithAggregationInput[];
  by: Prisma.MagicLinkScalarFieldEnum[] | Prisma.MagicLinkScalarFieldEnum;
  having?: Prisma.MagicLinkScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MagicLinkCountAggregateInputType | true;
  _min?: MagicLinkMinAggregateInputType;
  _max?: MagicLinkMaxAggregateInputType;
};

export type MagicLinkGroupByOutputType = {
  identifier: string;
  token: string;
  expires: Date;
  _count: MagicLinkCountAggregateOutputType | null;
  _min: MagicLinkMinAggregateOutputType | null;
  _max: MagicLinkMaxAggregateOutputType | null;
};

type GetMagicLinkGroupByPayload<T extends MagicLinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MagicLinkGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof MagicLinkGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MagicLinkGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MagicLinkGroupByOutputType[P]>;
    }
  >
>;

export type MagicLinkWhereInput = {
  AND?: Prisma.MagicLinkWhereInput | Prisma.MagicLinkWhereInput[];
  OR?: Prisma.MagicLinkWhereInput[];
  NOT?: Prisma.MagicLinkWhereInput | Prisma.MagicLinkWhereInput[];
  identifier?: Prisma.StringFilter<"MagicLink"> | string;
  token?: Prisma.StringFilter<"MagicLink"> | string;
  expires?: Prisma.DateTimeFilter<"MagicLink"> | Date | string;
};

export type MagicLinkOrderByWithRelationInput = {
  identifier?: Prisma.SortOrder;
  token?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type MagicLinkWhereUniqueInput = Prisma.AtLeast<
  {
    identifier?: string;
    token?: string;
    AND?: Prisma.MagicLinkWhereInput | Prisma.MagicLinkWhereInput[];
    OR?: Prisma.MagicLinkWhereInput[];
    NOT?: Prisma.MagicLinkWhereInput | Prisma.MagicLinkWhereInput[];
    expires?: Prisma.DateTimeFilter<"MagicLink"> | Date | string;
  },
  "identifier" | "token"
>;

export type MagicLinkOrderByWithAggregationInput = {
  identifier?: Prisma.SortOrder;
  token?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
  _count?: Prisma.MagicLinkCountOrderByAggregateInput;
  _max?: Prisma.MagicLinkMaxOrderByAggregateInput;
  _min?: Prisma.MagicLinkMinOrderByAggregateInput;
};

export type MagicLinkScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MagicLinkScalarWhereWithAggregatesInput
    | Prisma.MagicLinkScalarWhereWithAggregatesInput[];
  OR?: Prisma.MagicLinkScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MagicLinkScalarWhereWithAggregatesInput
    | Prisma.MagicLinkScalarWhereWithAggregatesInput[];
  identifier?: Prisma.StringWithAggregatesFilter<"MagicLink"> | string;
  token?: Prisma.StringWithAggregatesFilter<"MagicLink"> | string;
  expires?: Prisma.DateTimeWithAggregatesFilter<"MagicLink"> | Date | string;
};

export type MagicLinkCreateInput = {
  identifier: string;
  token: string;
  expires: Date | string;
};

export type MagicLinkUncheckedCreateInput = {
  identifier: string;
  token: string;
  expires: Date | string;
};

export type MagicLinkUpdateInput = {
  identifier?: Prisma.StringFieldUpdateOperationsInput | string;
  token?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MagicLinkUncheckedUpdateInput = {
  identifier?: Prisma.StringFieldUpdateOperationsInput | string;
  token?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MagicLinkCreateManyInput = {
  identifier: string;
  token: string;
  expires: Date | string;
};

export type MagicLinkUpdateManyMutationInput = {
  identifier?: Prisma.StringFieldUpdateOperationsInput | string;
  token?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MagicLinkUncheckedUpdateManyInput = {
  identifier?: Prisma.StringFieldUpdateOperationsInput | string;
  token?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MagicLinkCountOrderByAggregateInput = {
  identifier?: Prisma.SortOrder;
  token?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type MagicLinkMaxOrderByAggregateInput = {
  identifier?: Prisma.SortOrder;
  token?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type MagicLinkMinOrderByAggregateInput = {
  identifier?: Prisma.SortOrder;
  token?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type MagicLinkSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    identifier?: boolean;
    token?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["magicLink"]
>;

export type MagicLinkSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    identifier?: boolean;
    token?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["magicLink"]
>;

export type MagicLinkSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    identifier?: boolean;
    token?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["magicLink"]
>;

export type MagicLinkSelectScalar = {
  identifier?: boolean;
  token?: boolean;
  expires?: boolean;
};

export type MagicLinkOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "identifier" | "token" | "expires",
  ExtArgs["result"]["magicLink"]
>;

export type $MagicLinkPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "MagicLink";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      identifier: string;
      token: string;
      expires: Date;
    },
    ExtArgs["result"]["magicLink"]
  >;
  composites: {};
};

export type MagicLinkGetPayload<S extends boolean | null | undefined | MagicLinkDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MagicLinkPayload, S>;

export type MagicLinkCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MagicLinkFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: MagicLinkCountAggregateInputType | true;
};

export interface MagicLinkDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["MagicLink"];
    meta: { name: "MagicLink" };
  };
  /**
   * Find zero or one MagicLink that matches the filter.
   * @param {MagicLinkFindUniqueArgs} args - Arguments to find a MagicLink
   * @example
   * // Get one MagicLink
   * const magicLink = await prisma.magicLink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MagicLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MagicLinkFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MagicLink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MagicLinkFindUniqueOrThrowArgs} args - Arguments to find a MagicLink
   * @example
   * // Get one MagicLink
   * const magicLink = await prisma.magicLink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MagicLinkFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MagicLinkFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MagicLink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkFindFirstArgs} args - Arguments to find a MagicLink
   * @example
   * // Get one MagicLink
   * const magicLink = await prisma.magicLink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MagicLinkFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MagicLink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkFindFirstOrThrowArgs} args - Arguments to find a MagicLink
   * @example
   * // Get one MagicLink
   * const magicLink = await prisma.magicLink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MagicLinkFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MagicLinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MagicLinks
   * const magicLinks = await prisma.magicLink.findMany()
   *
   * // Get first 10 MagicLinks
   * const magicLinks = await prisma.magicLink.findMany({ take: 10 })
   *
   * // Only select the `identifier`
   * const magicLinkWithIdentifierOnly = await prisma.magicLink.findMany({ select: { identifier: true } })
   *
   */
  findMany<T extends MagicLinkFindManyArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a MagicLink.
   * @param {MagicLinkCreateArgs} args - Arguments to create a MagicLink.
   * @example
   * // Create one MagicLink
   * const MagicLink = await prisma.magicLink.create({
   *   data: {
   *     // ... data to create a MagicLink
   *   }
   * })
   *
   */
  create<T extends MagicLinkCreateArgs>(
    args: Prisma.SelectSubset<T, MagicLinkCreateArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MagicLinks.
   * @param {MagicLinkCreateManyArgs} args - Arguments to create many MagicLinks.
   * @example
   * // Create many MagicLinks
   * const magicLink = await prisma.magicLink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MagicLinkCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MagicLinks and returns the data saved in the database.
   * @param {MagicLinkCreateManyAndReturnArgs} args - Arguments to create many MagicLinks.
   * @example
   * // Create many MagicLinks
   * const magicLink = await prisma.magicLink.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MagicLinks and only return the `identifier`
   * const magicLinkWithIdentifierOnly = await prisma.magicLink.createManyAndReturn({
   *   select: { identifier: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MagicLinkCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MagicLink.
   * @param {MagicLinkDeleteArgs} args - Arguments to delete one MagicLink.
   * @example
   * // Delete one MagicLink
   * const MagicLink = await prisma.magicLink.delete({
   *   where: {
   *     // ... filter to delete one MagicLink
   *   }
   * })
   *
   */
  delete<T extends MagicLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, MagicLinkDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MagicLink.
   * @param {MagicLinkUpdateArgs} args - Arguments to update one MagicLink.
   * @example
   * // Update one MagicLink
   * const magicLink = await prisma.magicLink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MagicLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, MagicLinkUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MagicLinks.
   * @param {MagicLinkDeleteManyArgs} args - Arguments to filter MagicLinks to delete.
   * @example
   * // Delete a few MagicLinks
   * const { count } = await prisma.magicLink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MagicLinkDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MagicLinkDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MagicLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MagicLinks
   * const magicLink = await prisma.magicLink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MagicLinkUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MagicLinkUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MagicLinks and returns the data updated in the database.
   * @param {MagicLinkUpdateManyAndReturnArgs} args - Arguments to update many MagicLinks.
   * @example
   * // Update many MagicLinks
   * const magicLink = await prisma.magicLink.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MagicLinks and only return the `identifier`
   * const magicLinkWithIdentifierOnly = await prisma.magicLink.updateManyAndReturn({
   *   select: { identifier: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MagicLinkUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MagicLinkUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MagicLink.
   * @param {MagicLinkUpsertArgs} args - Arguments to update or create a MagicLink.
   * @example
   * // Update or create a MagicLink
   * const magicLink = await prisma.magicLink.upsert({
   *   create: {
   *     // ... data to create a MagicLink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MagicLink we want to update
   *   }
   * })
   */
  upsert<T extends MagicLinkUpsertArgs>(
    args: Prisma.SelectSubset<T, MagicLinkUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__MagicLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$MagicLinkPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MagicLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkCountArgs} args - Arguments to filter MagicLinks to count.
   * @example
   * // Count the number of MagicLinks
   * const count = await prisma.magicLink.count({
   *   where: {
   *     // ... the filter for the MagicLinks we want to count
   *   }
   * })
   **/
  count<T extends MagicLinkCountArgs>(
    args?: Prisma.Subset<T, MagicLinkCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], MagicLinkCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MagicLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MagicLinkAggregateArgs>(
    args: Prisma.Subset<T, MagicLinkAggregateArgs>
  ): Prisma.PrismaPromise<GetMagicLinkAggregateType<T>>;

  /**
   * Group by MagicLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MagicLinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MagicLinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MagicLinkGroupByArgs["orderBy"] }
      : { orderBy?: MagicLinkGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MagicLinkGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetMagicLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MagicLink model
   */
  readonly fields: MagicLinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MagicLink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MagicLinkClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MagicLink model
 */
export interface MagicLinkFieldRefs {
  readonly identifier: Prisma.FieldRef<"MagicLink", "String">;
  readonly token: Prisma.FieldRef<"MagicLink", "String">;
  readonly expires: Prisma.FieldRef<"MagicLink", "DateTime">;
}

// Custom InputTypes
/**
 * MagicLink findUnique
 */
export type MagicLinkFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter, which MagicLink to fetch.
   */
  where: Prisma.MagicLinkWhereUniqueInput;
};

/**
 * MagicLink findUniqueOrThrow
 */
export type MagicLinkFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter, which MagicLink to fetch.
   */
  where: Prisma.MagicLinkWhereUniqueInput;
};

/**
 * MagicLink findFirst
 */
export type MagicLinkFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter, which MagicLink to fetch.
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MagicLinks to fetch.
   */
  orderBy?: Prisma.MagicLinkOrderByWithRelationInput | Prisma.MagicLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MagicLinks.
   */
  cursor?: Prisma.MagicLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MagicLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MagicLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MagicLinks.
   */
  distinct?: Prisma.MagicLinkScalarFieldEnum | Prisma.MagicLinkScalarFieldEnum[];
};

/**
 * MagicLink findFirstOrThrow
 */
export type MagicLinkFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter, which MagicLink to fetch.
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MagicLinks to fetch.
   */
  orderBy?: Prisma.MagicLinkOrderByWithRelationInput | Prisma.MagicLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MagicLinks.
   */
  cursor?: Prisma.MagicLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MagicLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MagicLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MagicLinks.
   */
  distinct?: Prisma.MagicLinkScalarFieldEnum | Prisma.MagicLinkScalarFieldEnum[];
};

/**
 * MagicLink findMany
 */
export type MagicLinkFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter, which MagicLinks to fetch.
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MagicLinks to fetch.
   */
  orderBy?: Prisma.MagicLinkOrderByWithRelationInput | Prisma.MagicLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MagicLinks.
   */
  cursor?: Prisma.MagicLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MagicLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MagicLinks.
   */
  skip?: number;
  distinct?: Prisma.MagicLinkScalarFieldEnum | Prisma.MagicLinkScalarFieldEnum[];
};

/**
 * MagicLink create
 */
export type MagicLinkCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * The data needed to create a MagicLink.
   */
  data: Prisma.XOR<Prisma.MagicLinkCreateInput, Prisma.MagicLinkUncheckedCreateInput>;
};

/**
 * MagicLink createMany
 */
export type MagicLinkCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MagicLinks.
   */
  data: Prisma.MagicLinkCreateManyInput | Prisma.MagicLinkCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MagicLink createManyAndReturn
 */
export type MagicLinkCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * The data used to create many MagicLinks.
   */
  data: Prisma.MagicLinkCreateManyInput | Prisma.MagicLinkCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MagicLink update
 */
export type MagicLinkUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * The data needed to update a MagicLink.
   */
  data: Prisma.XOR<Prisma.MagicLinkUpdateInput, Prisma.MagicLinkUncheckedUpdateInput>;
  /**
   * Choose, which MagicLink to update.
   */
  where: Prisma.MagicLinkWhereUniqueInput;
};

/**
 * MagicLink updateMany
 */
export type MagicLinkUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MagicLinks.
   */
  data: Prisma.XOR<
    Prisma.MagicLinkUpdateManyMutationInput,
    Prisma.MagicLinkUncheckedUpdateManyInput
  >;
  /**
   * Filter which MagicLinks to update
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * Limit how many MagicLinks to update.
   */
  limit?: number;
};

/**
 * MagicLink updateManyAndReturn
 */
export type MagicLinkUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * The data used to update MagicLinks.
   */
  data: Prisma.XOR<
    Prisma.MagicLinkUpdateManyMutationInput,
    Prisma.MagicLinkUncheckedUpdateManyInput
  >;
  /**
   * Filter which MagicLinks to update
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * Limit how many MagicLinks to update.
   */
  limit?: number;
};

/**
 * MagicLink upsert
 */
export type MagicLinkUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * The filter to search for the MagicLink to update in case it exists.
   */
  where: Prisma.MagicLinkWhereUniqueInput;
  /**
   * In case the MagicLink found by the `where` argument doesn't exist, create a new MagicLink with this data.
   */
  create: Prisma.XOR<Prisma.MagicLinkCreateInput, Prisma.MagicLinkUncheckedCreateInput>;
  /**
   * In case the MagicLink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MagicLinkUpdateInput, Prisma.MagicLinkUncheckedUpdateInput>;
};

/**
 * MagicLink delete
 */
export type MagicLinkDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
  /**
   * Filter which MagicLink to delete.
   */
  where: Prisma.MagicLinkWhereUniqueInput;
};

/**
 * MagicLink deleteMany
 */
export type MagicLinkDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MagicLinks to delete
   */
  where?: Prisma.MagicLinkWhereInput;
  /**
   * Limit how many MagicLinks to delete.
   */
  limit?: number;
};

/**
 * MagicLink without action
 */
export type MagicLinkDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MagicLink
   */
  select?: Prisma.MagicLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MagicLink
   */
  omit?: Prisma.MagicLinkOmit<ExtArgs> | null;
};
