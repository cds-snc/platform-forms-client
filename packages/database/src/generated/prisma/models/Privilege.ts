/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Privilege` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model Privilege
 *
 */
export type PrivilegeModel = runtime.Types.Result.DefaultSelection<Prisma.$PrivilegePayload>;

export type AggregatePrivilege = {
  _count: PrivilegeCountAggregateOutputType | null;
  _avg: PrivilegeAvgAggregateOutputType | null;
  _sum: PrivilegeSumAggregateOutputType | null;
  _min: PrivilegeMinAggregateOutputType | null;
  _max: PrivilegeMaxAggregateOutputType | null;
};

export type PrivilegeAvgAggregateOutputType = {
  priority: number | null;
};

export type PrivilegeSumAggregateOutputType = {
  priority: number | null;
};

export type PrivilegeMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  descriptionEn: string | null;
  descriptionFr: string | null;
  priority: number | null;
};

export type PrivilegeMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  descriptionEn: string | null;
  descriptionFr: string | null;
  priority: number | null;
};

export type PrivilegeCountAggregateOutputType = {
  id: number;
  name: number;
  descriptionEn: number;
  descriptionFr: number;
  permissions: number;
  priority: number;
  _all: number;
};

export type PrivilegeAvgAggregateInputType = {
  priority?: true;
};

export type PrivilegeSumAggregateInputType = {
  priority?: true;
};

export type PrivilegeMinAggregateInputType = {
  id?: true;
  name?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  priority?: true;
};

export type PrivilegeMaxAggregateInputType = {
  id?: true;
  name?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  priority?: true;
};

export type PrivilegeCountAggregateInputType = {
  id?: true;
  name?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  permissions?: true;
  priority?: true;
  _all?: true;
};

export type PrivilegeAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Privilege to aggregate.
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Privileges to fetch.
   */
  orderBy?: Prisma.PrivilegeOrderByWithRelationInput | Prisma.PrivilegeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PrivilegeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Privileges from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Privileges.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Privileges
   **/
  _count?: true | PrivilegeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: PrivilegeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: PrivilegeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PrivilegeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PrivilegeMaxAggregateInputType;
};

export type GetPrivilegeAggregateType<T extends PrivilegeAggregateArgs> = {
  [P in keyof T & keyof AggregatePrivilege]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePrivilege[P]>
    : Prisma.GetScalarType<T[P], AggregatePrivilege[P]>;
};

export type PrivilegeGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PrivilegeWhereInput;
  orderBy?:
    | Prisma.PrivilegeOrderByWithAggregationInput
    | Prisma.PrivilegeOrderByWithAggregationInput[];
  by: Prisma.PrivilegeScalarFieldEnum[] | Prisma.PrivilegeScalarFieldEnum;
  having?: Prisma.PrivilegeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PrivilegeCountAggregateInputType | true;
  _avg?: PrivilegeAvgAggregateInputType;
  _sum?: PrivilegeSumAggregateInputType;
  _min?: PrivilegeMinAggregateInputType;
  _max?: PrivilegeMaxAggregateInputType;
};

export type PrivilegeGroupByOutputType = {
  id: string;
  name: string;
  descriptionEn: string | null;
  descriptionFr: string | null;
  permissions: runtime.JsonValue;
  priority: number;
  _count: PrivilegeCountAggregateOutputType | null;
  _avg: PrivilegeAvgAggregateOutputType | null;
  _sum: PrivilegeSumAggregateOutputType | null;
  _min: PrivilegeMinAggregateOutputType | null;
  _max: PrivilegeMaxAggregateOutputType | null;
};

type GetPrivilegeGroupByPayload<T extends PrivilegeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PrivilegeGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof PrivilegeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PrivilegeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PrivilegeGroupByOutputType[P]>;
    }
  >
>;

export type PrivilegeWhereInput = {
  AND?: Prisma.PrivilegeWhereInput | Prisma.PrivilegeWhereInput[];
  OR?: Prisma.PrivilegeWhereInput[];
  NOT?: Prisma.PrivilegeWhereInput | Prisma.PrivilegeWhereInput[];
  id?: Prisma.StringFilter<"Privilege"> | string;
  name?: Prisma.StringFilter<"Privilege"> | string;
  descriptionEn?: Prisma.StringNullableFilter<"Privilege"> | string | null;
  descriptionFr?: Prisma.StringNullableFilter<"Privilege"> | string | null;
  permissions?: Prisma.JsonFilter<"Privilege">;
  priority?: Prisma.IntFilter<"Privilege"> | number;
  users?: Prisma.UserListRelationFilter;
};

export type PrivilegeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrderInput | Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrderInput | Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  priority?: Prisma.SortOrder;
  users?: Prisma.UserOrderByRelationAggregateInput;
};

export type PrivilegeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name?: string;
    AND?: Prisma.PrivilegeWhereInput | Prisma.PrivilegeWhereInput[];
    OR?: Prisma.PrivilegeWhereInput[];
    NOT?: Prisma.PrivilegeWhereInput | Prisma.PrivilegeWhereInput[];
    descriptionEn?: Prisma.StringNullableFilter<"Privilege"> | string | null;
    descriptionFr?: Prisma.StringNullableFilter<"Privilege"> | string | null;
    permissions?: Prisma.JsonFilter<"Privilege">;
    priority?: Prisma.IntFilter<"Privilege"> | number;
    users?: Prisma.UserListRelationFilter;
  },
  "id" | "name"
>;

export type PrivilegeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrderInput | Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrderInput | Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  priority?: Prisma.SortOrder;
  _count?: Prisma.PrivilegeCountOrderByAggregateInput;
  _avg?: Prisma.PrivilegeAvgOrderByAggregateInput;
  _max?: Prisma.PrivilegeMaxOrderByAggregateInput;
  _min?: Prisma.PrivilegeMinOrderByAggregateInput;
  _sum?: Prisma.PrivilegeSumOrderByAggregateInput;
};

export type PrivilegeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PrivilegeScalarWhereWithAggregatesInput
    | Prisma.PrivilegeScalarWhereWithAggregatesInput[];
  OR?: Prisma.PrivilegeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PrivilegeScalarWhereWithAggregatesInput
    | Prisma.PrivilegeScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Privilege"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Privilege"> | string;
  descriptionEn?: Prisma.StringNullableWithAggregatesFilter<"Privilege"> | string | null;
  descriptionFr?: Prisma.StringNullableWithAggregatesFilter<"Privilege"> | string | null;
  permissions?: Prisma.JsonWithAggregatesFilter<"Privilege">;
  priority?: Prisma.IntWithAggregatesFilter<"Privilege"> | number;
};

export type PrivilegeCreateInput = {
  id?: string;
  name: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  permissions: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority: number;
  users?: Prisma.UserCreateNestedManyWithoutPrivilegesInput;
};

export type PrivilegeUncheckedCreateInput = {
  id?: string;
  name: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  permissions: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority: number;
  users?: Prisma.UserUncheckedCreateNestedManyWithoutPrivilegesInput;
};

export type PrivilegeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
  users?: Prisma.UserUpdateManyWithoutPrivilegesNestedInput;
};

export type PrivilegeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
  users?: Prisma.UserUncheckedUpdateManyWithoutPrivilegesNestedInput;
};

export type PrivilegeCreateManyInput = {
  id?: string;
  name: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  permissions: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority: number;
};

export type PrivilegeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PrivilegeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PrivilegeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  priority?: Prisma.SortOrder;
};

export type PrivilegeAvgOrderByAggregateInput = {
  priority?: Prisma.SortOrder;
};

export type PrivilegeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  priority?: Prisma.SortOrder;
};

export type PrivilegeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  priority?: Prisma.SortOrder;
};

export type PrivilegeSumOrderByAggregateInput = {
  priority?: Prisma.SortOrder;
};

export type PrivilegeListRelationFilter = {
  every?: Prisma.PrivilegeWhereInput;
  some?: Prisma.PrivilegeWhereInput;
  none?: Prisma.PrivilegeWhereInput;
};

export type PrivilegeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type IntFieldUpdateOperationsInput = {
  set?: number;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type PrivilegeCreateNestedManyWithoutUsersInput = {
  create?:
    | Prisma.XOR<
        Prisma.PrivilegeCreateWithoutUsersInput,
        Prisma.PrivilegeUncheckedCreateWithoutUsersInput
      >
    | Prisma.PrivilegeCreateWithoutUsersInput[]
    | Prisma.PrivilegeUncheckedCreateWithoutUsersInput[];
  connectOrCreate?:
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput[];
  connect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
};

export type PrivilegeUncheckedCreateNestedManyWithoutUsersInput = {
  create?:
    | Prisma.XOR<
        Prisma.PrivilegeCreateWithoutUsersInput,
        Prisma.PrivilegeUncheckedCreateWithoutUsersInput
      >
    | Prisma.PrivilegeCreateWithoutUsersInput[]
    | Prisma.PrivilegeUncheckedCreateWithoutUsersInput[];
  connectOrCreate?:
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput[];
  connect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
};

export type PrivilegeUpdateManyWithoutUsersNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PrivilegeCreateWithoutUsersInput,
        Prisma.PrivilegeUncheckedCreateWithoutUsersInput
      >
    | Prisma.PrivilegeCreateWithoutUsersInput[]
    | Prisma.PrivilegeUncheckedCreateWithoutUsersInput[];
  connectOrCreate?:
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput[];
  upsert?:
    | Prisma.PrivilegeUpsertWithWhereUniqueWithoutUsersInput
    | Prisma.PrivilegeUpsertWithWhereUniqueWithoutUsersInput[];
  set?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  disconnect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  delete?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  connect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  update?:
    | Prisma.PrivilegeUpdateWithWhereUniqueWithoutUsersInput
    | Prisma.PrivilegeUpdateWithWhereUniqueWithoutUsersInput[];
  updateMany?:
    | Prisma.PrivilegeUpdateManyWithWhereWithoutUsersInput
    | Prisma.PrivilegeUpdateManyWithWhereWithoutUsersInput[];
  deleteMany?: Prisma.PrivilegeScalarWhereInput | Prisma.PrivilegeScalarWhereInput[];
};

export type PrivilegeUncheckedUpdateManyWithoutUsersNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PrivilegeCreateWithoutUsersInput,
        Prisma.PrivilegeUncheckedCreateWithoutUsersInput
      >
    | Prisma.PrivilegeCreateWithoutUsersInput[]
    | Prisma.PrivilegeUncheckedCreateWithoutUsersInput[];
  connectOrCreate?:
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput
    | Prisma.PrivilegeCreateOrConnectWithoutUsersInput[];
  upsert?:
    | Prisma.PrivilegeUpsertWithWhereUniqueWithoutUsersInput
    | Prisma.PrivilegeUpsertWithWhereUniqueWithoutUsersInput[];
  set?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  disconnect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  delete?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  connect?: Prisma.PrivilegeWhereUniqueInput | Prisma.PrivilegeWhereUniqueInput[];
  update?:
    | Prisma.PrivilegeUpdateWithWhereUniqueWithoutUsersInput
    | Prisma.PrivilegeUpdateWithWhereUniqueWithoutUsersInput[];
  updateMany?:
    | Prisma.PrivilegeUpdateManyWithWhereWithoutUsersInput
    | Prisma.PrivilegeUpdateManyWithWhereWithoutUsersInput[];
  deleteMany?: Prisma.PrivilegeScalarWhereInput | Prisma.PrivilegeScalarWhereInput[];
};

export type PrivilegeCreateWithoutUsersInput = {
  id?: string;
  name: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  permissions: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority: number;
};

export type PrivilegeUncheckedCreateWithoutUsersInput = {
  id?: string;
  name: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  permissions: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority: number;
};

export type PrivilegeCreateOrConnectWithoutUsersInput = {
  where: Prisma.PrivilegeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PrivilegeCreateWithoutUsersInput,
    Prisma.PrivilegeUncheckedCreateWithoutUsersInput
  >;
};

export type PrivilegeUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.PrivilegeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PrivilegeUpdateWithoutUsersInput,
    Prisma.PrivilegeUncheckedUpdateWithoutUsersInput
  >;
  create: Prisma.XOR<
    Prisma.PrivilegeCreateWithoutUsersInput,
    Prisma.PrivilegeUncheckedCreateWithoutUsersInput
  >;
};

export type PrivilegeUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.PrivilegeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PrivilegeUpdateWithoutUsersInput,
    Prisma.PrivilegeUncheckedUpdateWithoutUsersInput
  >;
};

export type PrivilegeUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.PrivilegeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PrivilegeUpdateManyMutationInput,
    Prisma.PrivilegeUncheckedUpdateManyWithoutUsersInput
  >;
};

export type PrivilegeScalarWhereInput = {
  AND?: Prisma.PrivilegeScalarWhereInput | Prisma.PrivilegeScalarWhereInput[];
  OR?: Prisma.PrivilegeScalarWhereInput[];
  NOT?: Prisma.PrivilegeScalarWhereInput | Prisma.PrivilegeScalarWhereInput[];
  id?: Prisma.StringFilter<"Privilege"> | string;
  name?: Prisma.StringFilter<"Privilege"> | string;
  descriptionEn?: Prisma.StringNullableFilter<"Privilege"> | string | null;
  descriptionFr?: Prisma.StringNullableFilter<"Privilege"> | string | null;
  permissions?: Prisma.JsonFilter<"Privilege">;
  priority?: Prisma.IntFilter<"Privilege"> | number;
};

export type PrivilegeUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PrivilegeUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PrivilegeUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  priority?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type PrivilegeCountOutputType
 */

export type PrivilegeCountOutputType = {
  users: number;
};

export type PrivilegeCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  users?: boolean | PrivilegeCountOutputTypeCountUsersArgs;
};

/**
 * PrivilegeCountOutputType without action
 */
export type PrivilegeCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PrivilegeCountOutputType
   */
  select?: Prisma.PrivilegeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * PrivilegeCountOutputType without action
 */
export type PrivilegeCountOutputTypeCountUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserWhereInput;
};

export type PrivilegeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    permissions?: boolean;
    priority?: boolean;
    users?: boolean | Prisma.Privilege$usersArgs<ExtArgs>;
    _count?: boolean | Prisma.PrivilegeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["privilege"]
>;

export type PrivilegeSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    permissions?: boolean;
    priority?: boolean;
  },
  ExtArgs["result"]["privilege"]
>;

export type PrivilegeSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    permissions?: boolean;
    priority?: boolean;
  },
  ExtArgs["result"]["privilege"]
>;

export type PrivilegeSelectScalar = {
  id?: boolean;
  name?: boolean;
  descriptionEn?: boolean;
  descriptionFr?: boolean;
  permissions?: boolean;
  priority?: boolean;
};

export type PrivilegeOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "descriptionEn" | "descriptionFr" | "permissions" | "priority",
  ExtArgs["result"]["privilege"]
>;
export type PrivilegeInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  users?: boolean | Prisma.Privilege$usersArgs<ExtArgs>;
  _count?: boolean | Prisma.PrivilegeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type PrivilegeIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type PrivilegeIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $PrivilegePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Privilege";
  objects: {
    users: Prisma.$UserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      descriptionEn: string | null;
      descriptionFr: string | null;
      permissions: runtime.JsonValue;
      priority: number;
    },
    ExtArgs["result"]["privilege"]
  >;
  composites: {};
};

export type PrivilegeGetPayload<S extends boolean | null | undefined | PrivilegeDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$PrivilegePayload, S>;

export type PrivilegeCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<PrivilegeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: PrivilegeCountAggregateInputType | true;
};

export interface PrivilegeDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Privilege"];
    meta: { name: "Privilege" };
  };
  /**
   * Find zero or one Privilege that matches the filter.
   * @param {PrivilegeFindUniqueArgs} args - Arguments to find a Privilege
   * @example
   * // Get one Privilege
   * const privilege = await prisma.privilege.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PrivilegeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PrivilegeFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Privilege that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PrivilegeFindUniqueOrThrowArgs} args - Arguments to find a Privilege
   * @example
   * // Get one Privilege
   * const privilege = await prisma.privilege.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PrivilegeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PrivilegeFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Privilege that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeFindFirstArgs} args - Arguments to find a Privilege
   * @example
   * // Get one Privilege
   * const privilege = await prisma.privilege.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PrivilegeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Privilege that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeFindFirstOrThrowArgs} args - Arguments to find a Privilege
   * @example
   * // Get one Privilege
   * const privilege = await prisma.privilege.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PrivilegeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Privileges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Privileges
   * const privileges = await prisma.privilege.findMany()
   *
   * // Get first 10 Privileges
   * const privileges = await prisma.privilege.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const privilegeWithIdOnly = await prisma.privilege.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PrivilegeFindManyArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Privilege.
   * @param {PrivilegeCreateArgs} args - Arguments to create a Privilege.
   * @example
   * // Create one Privilege
   * const Privilege = await prisma.privilege.create({
   *   data: {
   *     // ... data to create a Privilege
   *   }
   * })
   *
   */
  create<T extends PrivilegeCreateArgs>(
    args: Prisma.SelectSubset<T, PrivilegeCreateArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Privileges.
   * @param {PrivilegeCreateManyArgs} args - Arguments to create many Privileges.
   * @example
   * // Create many Privileges
   * const privilege = await prisma.privilege.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PrivilegeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Privileges and returns the data saved in the database.
   * @param {PrivilegeCreateManyAndReturnArgs} args - Arguments to create many Privileges.
   * @example
   * // Create many Privileges
   * const privilege = await prisma.privilege.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Privileges and only return the `id`
   * const privilegeWithIdOnly = await prisma.privilege.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PrivilegeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Privilege.
   * @param {PrivilegeDeleteArgs} args - Arguments to delete one Privilege.
   * @example
   * // Delete one Privilege
   * const Privilege = await prisma.privilege.delete({
   *   where: {
   *     // ... filter to delete one Privilege
   *   }
   * })
   *
   */
  delete<T extends PrivilegeDeleteArgs>(
    args: Prisma.SelectSubset<T, PrivilegeDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Privilege.
   * @param {PrivilegeUpdateArgs} args - Arguments to update one Privilege.
   * @example
   * // Update one Privilege
   * const privilege = await prisma.privilege.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PrivilegeUpdateArgs>(
    args: Prisma.SelectSubset<T, PrivilegeUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Privileges.
   * @param {PrivilegeDeleteManyArgs} args - Arguments to filter Privileges to delete.
   * @example
   * // Delete a few Privileges
   * const { count } = await prisma.privilege.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PrivilegeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PrivilegeDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Privileges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Privileges
   * const privilege = await prisma.privilege.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PrivilegeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PrivilegeUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Privileges and returns the data updated in the database.
   * @param {PrivilegeUpdateManyAndReturnArgs} args - Arguments to update many Privileges.
   * @example
   * // Update many Privileges
   * const privilege = await prisma.privilege.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Privileges and only return the `id`
   * const privilegeWithIdOnly = await prisma.privilege.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PrivilegeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PrivilegeUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Privilege.
   * @param {PrivilegeUpsertArgs} args - Arguments to update or create a Privilege.
   * @example
   * // Update or create a Privilege
   * const privilege = await prisma.privilege.upsert({
   *   create: {
   *     // ... data to create a Privilege
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Privilege we want to update
   *   }
   * })
   */
  upsert<T extends PrivilegeUpsertArgs>(
    args: Prisma.SelectSubset<T, PrivilegeUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__PrivilegeClient<
    runtime.Types.Result.GetResult<
      Prisma.$PrivilegePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Privileges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeCountArgs} args - Arguments to filter Privileges to count.
   * @example
   * // Count the number of Privileges
   * const count = await prisma.privilege.count({
   *   where: {
   *     // ... the filter for the Privileges we want to count
   *   }
   * })
   **/
  count<T extends PrivilegeCountArgs>(
    args?: Prisma.Subset<T, PrivilegeCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], PrivilegeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Privilege.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PrivilegeAggregateArgs>(
    args: Prisma.Subset<T, PrivilegeAggregateArgs>
  ): Prisma.PrismaPromise<GetPrivilegeAggregateType<T>>;

  /**
   * Group by Privilege.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrivilegeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PrivilegeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PrivilegeGroupByArgs["orderBy"] }
      : { orderBy?: PrivilegeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PrivilegeGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetPrivilegeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Privilege model
   */
  readonly fields: PrivilegeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Privilege.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PrivilegeClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  users<T extends Prisma.Privilege$usersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Privilege$usersArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Privilege model
 */
export interface PrivilegeFieldRefs {
  readonly id: Prisma.FieldRef<"Privilege", "String">;
  readonly name: Prisma.FieldRef<"Privilege", "String">;
  readonly descriptionEn: Prisma.FieldRef<"Privilege", "String">;
  readonly descriptionFr: Prisma.FieldRef<"Privilege", "String">;
  readonly permissions: Prisma.FieldRef<"Privilege", "Json">;
  readonly priority: Prisma.FieldRef<"Privilege", "Int">;
}

// Custom InputTypes
/**
 * Privilege findUnique
 */
export type PrivilegeFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter, which Privilege to fetch.
   */
  where: Prisma.PrivilegeWhereUniqueInput;
};

/**
 * Privilege findUniqueOrThrow
 */
export type PrivilegeFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter, which Privilege to fetch.
   */
  where: Prisma.PrivilegeWhereUniqueInput;
};

/**
 * Privilege findFirst
 */
export type PrivilegeFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter, which Privilege to fetch.
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Privileges to fetch.
   */
  orderBy?: Prisma.PrivilegeOrderByWithRelationInput | Prisma.PrivilegeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Privileges.
   */
  cursor?: Prisma.PrivilegeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Privileges from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Privileges.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Privileges.
   */
  distinct?: Prisma.PrivilegeScalarFieldEnum | Prisma.PrivilegeScalarFieldEnum[];
};

/**
 * Privilege findFirstOrThrow
 */
export type PrivilegeFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter, which Privilege to fetch.
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Privileges to fetch.
   */
  orderBy?: Prisma.PrivilegeOrderByWithRelationInput | Prisma.PrivilegeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Privileges.
   */
  cursor?: Prisma.PrivilegeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Privileges from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Privileges.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Privileges.
   */
  distinct?: Prisma.PrivilegeScalarFieldEnum | Prisma.PrivilegeScalarFieldEnum[];
};

/**
 * Privilege findMany
 */
export type PrivilegeFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter, which Privileges to fetch.
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Privileges to fetch.
   */
  orderBy?: Prisma.PrivilegeOrderByWithRelationInput | Prisma.PrivilegeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Privileges.
   */
  cursor?: Prisma.PrivilegeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Privileges from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Privileges.
   */
  skip?: number;
  distinct?: Prisma.PrivilegeScalarFieldEnum | Prisma.PrivilegeScalarFieldEnum[];
};

/**
 * Privilege create
 */
export type PrivilegeCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * The data needed to create a Privilege.
   */
  data: Prisma.XOR<Prisma.PrivilegeCreateInput, Prisma.PrivilegeUncheckedCreateInput>;
};

/**
 * Privilege createMany
 */
export type PrivilegeCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Privileges.
   */
  data: Prisma.PrivilegeCreateManyInput | Prisma.PrivilegeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Privilege createManyAndReturn
 */
export type PrivilegeCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * The data used to create many Privileges.
   */
  data: Prisma.PrivilegeCreateManyInput | Prisma.PrivilegeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Privilege update
 */
export type PrivilegeUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * The data needed to update a Privilege.
   */
  data: Prisma.XOR<Prisma.PrivilegeUpdateInput, Prisma.PrivilegeUncheckedUpdateInput>;
  /**
   * Choose, which Privilege to update.
   */
  where: Prisma.PrivilegeWhereUniqueInput;
};

/**
 * Privilege updateMany
 */
export type PrivilegeUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Privileges.
   */
  data: Prisma.XOR<
    Prisma.PrivilegeUpdateManyMutationInput,
    Prisma.PrivilegeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Privileges to update
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * Limit how many Privileges to update.
   */
  limit?: number;
};

/**
 * Privilege updateManyAndReturn
 */
export type PrivilegeUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * The data used to update Privileges.
   */
  data: Prisma.XOR<
    Prisma.PrivilegeUpdateManyMutationInput,
    Prisma.PrivilegeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Privileges to update
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * Limit how many Privileges to update.
   */
  limit?: number;
};

/**
 * Privilege upsert
 */
export type PrivilegeUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * The filter to search for the Privilege to update in case it exists.
   */
  where: Prisma.PrivilegeWhereUniqueInput;
  /**
   * In case the Privilege found by the `where` argument doesn't exist, create a new Privilege with this data.
   */
  create: Prisma.XOR<Prisma.PrivilegeCreateInput, Prisma.PrivilegeUncheckedCreateInput>;
  /**
   * In case the Privilege was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PrivilegeUpdateInput, Prisma.PrivilegeUncheckedUpdateInput>;
};

/**
 * Privilege delete
 */
export type PrivilegeDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
  /**
   * Filter which Privilege to delete.
   */
  where: Prisma.PrivilegeWhereUniqueInput;
};

/**
 * Privilege deleteMany
 */
export type PrivilegeDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Privileges to delete
   */
  where?: Prisma.PrivilegeWhereInput;
  /**
   * Limit how many Privileges to delete.
   */
  limit?: number;
};

/**
 * Privilege.users
 */
export type Privilege$usersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[];
  cursor?: Prisma.UserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * Privilege without action
 */
export type PrivilegeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Privilege
   */
  select?: Prisma.PrivilegeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Privilege
   */
  omit?: Prisma.PrivilegeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PrivilegeInclude<ExtArgs> | null;
};
