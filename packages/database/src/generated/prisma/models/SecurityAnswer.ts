/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SecurityAnswer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model SecurityAnswer
 *
 */
export type SecurityAnswerModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SecurityAnswerPayload>;

export type AggregateSecurityAnswer = {
  _count: SecurityAnswerCountAggregateOutputType | null;
  _min: SecurityAnswerMinAggregateOutputType | null;
  _max: SecurityAnswerMaxAggregateOutputType | null;
};

export type SecurityAnswerMinAggregateOutputType = {
  id: string | null;
  answer: string | null;
  userId: string | null;
  securityQuestionId: string | null;
};

export type SecurityAnswerMaxAggregateOutputType = {
  id: string | null;
  answer: string | null;
  userId: string | null;
  securityQuestionId: string | null;
};

export type SecurityAnswerCountAggregateOutputType = {
  id: number;
  answer: number;
  userId: number;
  securityQuestionId: number;
  _all: number;
};

export type SecurityAnswerMinAggregateInputType = {
  id?: true;
  answer?: true;
  userId?: true;
  securityQuestionId?: true;
};

export type SecurityAnswerMaxAggregateInputType = {
  id?: true;
  answer?: true;
  userId?: true;
  securityQuestionId?: true;
};

export type SecurityAnswerCountAggregateInputType = {
  id?: true;
  answer?: true;
  userId?: true;
  securityQuestionId?: true;
  _all?: true;
};

export type SecurityAnswerAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SecurityAnswer to aggregate.
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityAnswers to fetch.
   */
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithRelationInput
    | Prisma.SecurityAnswerOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SecurityAnswerWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SecurityAnswers
   **/
  _count?: true | SecurityAnswerCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SecurityAnswerMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SecurityAnswerMaxAggregateInputType;
};

export type GetSecurityAnswerAggregateType<T extends SecurityAnswerAggregateArgs> = {
  [P in keyof T & keyof AggregateSecurityAnswer]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSecurityAnswer[P]>
    : Prisma.GetScalarType<T[P], AggregateSecurityAnswer[P]>;
};

export type SecurityAnswerGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SecurityAnswerWhereInput;
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithAggregationInput
    | Prisma.SecurityAnswerOrderByWithAggregationInput[];
  by: Prisma.SecurityAnswerScalarFieldEnum[] | Prisma.SecurityAnswerScalarFieldEnum;
  having?: Prisma.SecurityAnswerScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SecurityAnswerCountAggregateInputType | true;
  _min?: SecurityAnswerMinAggregateInputType;
  _max?: SecurityAnswerMaxAggregateInputType;
};

export type SecurityAnswerGroupByOutputType = {
  id: string;
  answer: string;
  userId: string;
  securityQuestionId: string;
  _count: SecurityAnswerCountAggregateOutputType | null;
  _min: SecurityAnswerMinAggregateOutputType | null;
  _max: SecurityAnswerMaxAggregateOutputType | null;
};

type GetSecurityAnswerGroupByPayload<T extends SecurityAnswerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SecurityAnswerGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof SecurityAnswerGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SecurityAnswerGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SecurityAnswerGroupByOutputType[P]>;
    }
  >
>;

export type SecurityAnswerWhereInput = {
  AND?: Prisma.SecurityAnswerWhereInput | Prisma.SecurityAnswerWhereInput[];
  OR?: Prisma.SecurityAnswerWhereInput[];
  NOT?: Prisma.SecurityAnswerWhereInput | Prisma.SecurityAnswerWhereInput[];
  id?: Prisma.StringFilter<"SecurityAnswer"> | string;
  answer?: Prisma.StringFilter<"SecurityAnswer"> | string;
  userId?: Prisma.StringFilter<"SecurityAnswer"> | string;
  securityQuestionId?: Prisma.StringFilter<"SecurityAnswer"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  question?: Prisma.XOR<
    Prisma.SecurityQuestionScalarRelationFilter,
    Prisma.SecurityQuestionWhereInput
  >;
};

export type SecurityAnswerOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  answer?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  securityQuestionId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  question?: Prisma.SecurityQuestionOrderByWithRelationInput;
};

export type SecurityAnswerWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.SecurityAnswerWhereInput | Prisma.SecurityAnswerWhereInput[];
    OR?: Prisma.SecurityAnswerWhereInput[];
    NOT?: Prisma.SecurityAnswerWhereInput | Prisma.SecurityAnswerWhereInput[];
    answer?: Prisma.StringFilter<"SecurityAnswer"> | string;
    userId?: Prisma.StringFilter<"SecurityAnswer"> | string;
    securityQuestionId?: Prisma.StringFilter<"SecurityAnswer"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    question?: Prisma.XOR<
      Prisma.SecurityQuestionScalarRelationFilter,
      Prisma.SecurityQuestionWhereInput
    >;
  },
  "id"
>;

export type SecurityAnswerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  answer?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  securityQuestionId?: Prisma.SortOrder;
  _count?: Prisma.SecurityAnswerCountOrderByAggregateInput;
  _max?: Prisma.SecurityAnswerMaxOrderByAggregateInput;
  _min?: Prisma.SecurityAnswerMinOrderByAggregateInput;
};

export type SecurityAnswerScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SecurityAnswerScalarWhereWithAggregatesInput
    | Prisma.SecurityAnswerScalarWhereWithAggregatesInput[];
  OR?: Prisma.SecurityAnswerScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SecurityAnswerScalarWhereWithAggregatesInput
    | Prisma.SecurityAnswerScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"SecurityAnswer"> | string;
  answer?: Prisma.StringWithAggregatesFilter<"SecurityAnswer"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"SecurityAnswer"> | string;
  securityQuestionId?: Prisma.StringWithAggregatesFilter<"SecurityAnswer"> | string;
};

export type SecurityAnswerCreateInput = {
  id?: string;
  answer: string;
  user: Prisma.UserCreateNestedOneWithoutSecurityAnswersInput;
  question: Prisma.SecurityQuestionCreateNestedOneWithoutSecurityAnswerInput;
};

export type SecurityAnswerUncheckedCreateInput = {
  id?: string;
  answer: string;
  userId: string;
  securityQuestionId: string;
};

export type SecurityAnswerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutSecurityAnswersNestedInput;
  question?: Prisma.SecurityQuestionUpdateOneRequiredWithoutSecurityAnswerNestedInput;
};

export type SecurityAnswerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  securityQuestionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerCreateManyInput = {
  id?: string;
  answer: string;
  userId: string;
  securityQuestionId: string;
};

export type SecurityAnswerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  securityQuestionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerListRelationFilter = {
  every?: Prisma.SecurityAnswerWhereInput;
  some?: Prisma.SecurityAnswerWhereInput;
  none?: Prisma.SecurityAnswerWhereInput;
};

export type SecurityAnswerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SecurityAnswerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answer?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  securityQuestionId?: Prisma.SortOrder;
};

export type SecurityAnswerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answer?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  securityQuestionId?: Prisma.SortOrder;
};

export type SecurityAnswerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answer?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  securityQuestionId?: Prisma.SortOrder;
};

export type SecurityAnswerCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutUserInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
      >
    | Prisma.SecurityAnswerCreateWithoutUserInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.SecurityAnswerCreateManyUserInputEnvelope;
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
};

export type SecurityAnswerUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutUserInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
      >
    | Prisma.SecurityAnswerCreateWithoutUserInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.SecurityAnswerCreateManyUserInputEnvelope;
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
};

export type SecurityAnswerUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutUserInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
      >
    | Prisma.SecurityAnswerCreateWithoutUserInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutUserInput
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.SecurityAnswerCreateManyUserInputEnvelope;
  set?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  disconnect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  delete?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  update?:
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutUserInput
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutUserInput
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
};

export type SecurityAnswerUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutUserInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
      >
    | Prisma.SecurityAnswerCreateWithoutUserInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutUserInput
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.SecurityAnswerCreateManyUserInputEnvelope;
  set?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  disconnect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  delete?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  update?:
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutUserInput
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutUserInput
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
};

export type SecurityAnswerCreateNestedManyWithoutQuestionInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutQuestionInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
      >
    | Prisma.SecurityAnswerCreateWithoutQuestionInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput[];
  createMany?: Prisma.SecurityAnswerCreateManyQuestionInputEnvelope;
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
};

export type SecurityAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutQuestionInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
      >
    | Prisma.SecurityAnswerCreateWithoutQuestionInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput[];
  createMany?: Prisma.SecurityAnswerCreateManyQuestionInputEnvelope;
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
};

export type SecurityAnswerUpdateManyWithoutQuestionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutQuestionInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
      >
    | Prisma.SecurityAnswerCreateWithoutQuestionInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput[];
  upsert?:
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutQuestionInput
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutQuestionInput[];
  createMany?: Prisma.SecurityAnswerCreateManyQuestionInputEnvelope;
  set?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  disconnect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  delete?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  update?:
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutQuestionInput
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutQuestionInput[];
  updateMany?:
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutQuestionInput
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutQuestionInput[];
  deleteMany?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
};

export type SecurityAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SecurityAnswerCreateWithoutQuestionInput,
        Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
      >
    | Prisma.SecurityAnswerCreateWithoutQuestionInput[]
    | Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput
    | Prisma.SecurityAnswerCreateOrConnectWithoutQuestionInput[];
  upsert?:
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutQuestionInput
    | Prisma.SecurityAnswerUpsertWithWhereUniqueWithoutQuestionInput[];
  createMany?: Prisma.SecurityAnswerCreateManyQuestionInputEnvelope;
  set?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  disconnect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  delete?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  connect?: Prisma.SecurityAnswerWhereUniqueInput | Prisma.SecurityAnswerWhereUniqueInput[];
  update?:
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutQuestionInput
    | Prisma.SecurityAnswerUpdateWithWhereUniqueWithoutQuestionInput[];
  updateMany?:
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutQuestionInput
    | Prisma.SecurityAnswerUpdateManyWithWhereWithoutQuestionInput[];
  deleteMany?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
};

export type SecurityAnswerCreateWithoutUserInput = {
  id?: string;
  answer: string;
  question: Prisma.SecurityQuestionCreateNestedOneWithoutSecurityAnswerInput;
};

export type SecurityAnswerUncheckedCreateWithoutUserInput = {
  id?: string;
  answer: string;
  securityQuestionId: string;
};

export type SecurityAnswerCreateOrConnectWithoutUserInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SecurityAnswerCreateWithoutUserInput,
    Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
  >;
};

export type SecurityAnswerCreateManyUserInputEnvelope = {
  data: Prisma.SecurityAnswerCreateManyUserInput | Prisma.SecurityAnswerCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type SecurityAnswerUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SecurityAnswerUpdateWithoutUserInput,
    Prisma.SecurityAnswerUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.SecurityAnswerCreateWithoutUserInput,
    Prisma.SecurityAnswerUncheckedCreateWithoutUserInput
  >;
};

export type SecurityAnswerUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateWithoutUserInput,
    Prisma.SecurityAnswerUncheckedUpdateWithoutUserInput
  >;
};

export type SecurityAnswerUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SecurityAnswerScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateManyMutationInput,
    Prisma.SecurityAnswerUncheckedUpdateManyWithoutUserInput
  >;
};

export type SecurityAnswerScalarWhereInput = {
  AND?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
  OR?: Prisma.SecurityAnswerScalarWhereInput[];
  NOT?: Prisma.SecurityAnswerScalarWhereInput | Prisma.SecurityAnswerScalarWhereInput[];
  id?: Prisma.StringFilter<"SecurityAnswer"> | string;
  answer?: Prisma.StringFilter<"SecurityAnswer"> | string;
  userId?: Prisma.StringFilter<"SecurityAnswer"> | string;
  securityQuestionId?: Prisma.StringFilter<"SecurityAnswer"> | string;
};

export type SecurityAnswerCreateWithoutQuestionInput = {
  id?: string;
  answer: string;
  user: Prisma.UserCreateNestedOneWithoutSecurityAnswersInput;
};

export type SecurityAnswerUncheckedCreateWithoutQuestionInput = {
  id?: string;
  answer: string;
  userId: string;
};

export type SecurityAnswerCreateOrConnectWithoutQuestionInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SecurityAnswerCreateWithoutQuestionInput,
    Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
  >;
};

export type SecurityAnswerCreateManyQuestionInputEnvelope = {
  data:
    | Prisma.SecurityAnswerCreateManyQuestionInput
    | Prisma.SecurityAnswerCreateManyQuestionInput[];
  skipDuplicates?: boolean;
};

export type SecurityAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SecurityAnswerUpdateWithoutQuestionInput,
    Prisma.SecurityAnswerUncheckedUpdateWithoutQuestionInput
  >;
  create: Prisma.XOR<
    Prisma.SecurityAnswerCreateWithoutQuestionInput,
    Prisma.SecurityAnswerUncheckedCreateWithoutQuestionInput
  >;
};

export type SecurityAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.SecurityAnswerWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateWithoutQuestionInput,
    Prisma.SecurityAnswerUncheckedUpdateWithoutQuestionInput
  >;
};

export type SecurityAnswerUpdateManyWithWhereWithoutQuestionInput = {
  where: Prisma.SecurityAnswerScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateManyMutationInput,
    Prisma.SecurityAnswerUncheckedUpdateManyWithoutQuestionInput
  >;
};

export type SecurityAnswerCreateManyUserInput = {
  id?: string;
  answer: string;
  securityQuestionId: string;
};

export type SecurityAnswerUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.SecurityQuestionUpdateOneRequiredWithoutSecurityAnswerNestedInput;
};

export type SecurityAnswerUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  securityQuestionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  securityQuestionId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerCreateManyQuestionInput = {
  id?: string;
  answer: string;
  userId: string;
};

export type SecurityAnswerUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutSecurityAnswersNestedInput;
};

export type SecurityAnswerUncheckedUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerUncheckedUpdateManyWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answer?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type SecurityAnswerSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answer?: boolean;
    userId?: boolean;
    securityQuestionId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["securityAnswer"]
>;

export type SecurityAnswerSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answer?: boolean;
    userId?: boolean;
    securityQuestionId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["securityAnswer"]
>;

export type SecurityAnswerSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answer?: boolean;
    userId?: boolean;
    securityQuestionId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["securityAnswer"]
>;

export type SecurityAnswerSelectScalar = {
  id?: boolean;
  answer?: boolean;
  userId?: boolean;
  securityQuestionId?: boolean;
};

export type SecurityAnswerOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "answer" | "userId" | "securityQuestionId",
  ExtArgs["result"]["securityAnswer"]
>;
export type SecurityAnswerInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
};
export type SecurityAnswerIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
};
export type SecurityAnswerIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  question?: boolean | Prisma.SecurityQuestionDefaultArgs<ExtArgs>;
};

export type $SecurityAnswerPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SecurityAnswer";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    question: Prisma.$SecurityQuestionPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      answer: string;
      userId: string;
      securityQuestionId: string;
    },
    ExtArgs["result"]["securityAnswer"]
  >;
  composites: {};
};

export type SecurityAnswerGetPayload<
  S extends boolean | null | undefined | SecurityAnswerDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SecurityAnswerPayload, S>;

export type SecurityAnswerCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SecurityAnswerFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SecurityAnswerCountAggregateInputType | true;
};

export interface SecurityAnswerDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SecurityAnswer"];
    meta: { name: "SecurityAnswer" };
  };
  /**
   * Find zero or one SecurityAnswer that matches the filter.
   * @param {SecurityAnswerFindUniqueArgs} args - Arguments to find a SecurityAnswer
   * @example
   * // Get one SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SecurityAnswerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SecurityAnswer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SecurityAnswerFindUniqueOrThrowArgs} args - Arguments to find a SecurityAnswer
   * @example
   * // Get one SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SecurityAnswerFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SecurityAnswer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerFindFirstArgs} args - Arguments to find a SecurityAnswer
   * @example
   * // Get one SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SecurityAnswerFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SecurityAnswer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerFindFirstOrThrowArgs} args - Arguments to find a SecurityAnswer
   * @example
   * // Get one SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SecurityAnswerFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SecurityAnswers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SecurityAnswers
   * const securityAnswers = await prisma.securityAnswer.findMany()
   *
   * // Get first 10 SecurityAnswers
   * const securityAnswers = await prisma.securityAnswer.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const securityAnswerWithIdOnly = await prisma.securityAnswer.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SecurityAnswerFindManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SecurityAnswer.
   * @param {SecurityAnswerCreateArgs} args - Arguments to create a SecurityAnswer.
   * @example
   * // Create one SecurityAnswer
   * const SecurityAnswer = await prisma.securityAnswer.create({
   *   data: {
   *     // ... data to create a SecurityAnswer
   *   }
   * })
   *
   */
  create<T extends SecurityAnswerCreateArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerCreateArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SecurityAnswers.
   * @param {SecurityAnswerCreateManyArgs} args - Arguments to create many SecurityAnswers.
   * @example
   * // Create many SecurityAnswers
   * const securityAnswer = await prisma.securityAnswer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SecurityAnswerCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SecurityAnswers and returns the data saved in the database.
   * @param {SecurityAnswerCreateManyAndReturnArgs} args - Arguments to create many SecurityAnswers.
   * @example
   * // Create many SecurityAnswers
   * const securityAnswer = await prisma.securityAnswer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SecurityAnswers and only return the `id`
   * const securityAnswerWithIdOnly = await prisma.securityAnswer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SecurityAnswerCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SecurityAnswer.
   * @param {SecurityAnswerDeleteArgs} args - Arguments to delete one SecurityAnswer.
   * @example
   * // Delete one SecurityAnswer
   * const SecurityAnswer = await prisma.securityAnswer.delete({
   *   where: {
   *     // ... filter to delete one SecurityAnswer
   *   }
   * })
   *
   */
  delete<T extends SecurityAnswerDeleteArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SecurityAnswer.
   * @param {SecurityAnswerUpdateArgs} args - Arguments to update one SecurityAnswer.
   * @example
   * // Update one SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SecurityAnswerUpdateArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SecurityAnswers.
   * @param {SecurityAnswerDeleteManyArgs} args - Arguments to filter SecurityAnswers to delete.
   * @example
   * // Delete a few SecurityAnswers
   * const { count } = await prisma.securityAnswer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SecurityAnswerDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityAnswerDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SecurityAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SecurityAnswers
   * const securityAnswer = await prisma.securityAnswer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SecurityAnswerUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SecurityAnswers and returns the data updated in the database.
   * @param {SecurityAnswerUpdateManyAndReturnArgs} args - Arguments to update many SecurityAnswers.
   * @example
   * // Update many SecurityAnswers
   * const securityAnswer = await prisma.securityAnswer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SecurityAnswers and only return the `id`
   * const securityAnswerWithIdOnly = await prisma.securityAnswer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SecurityAnswerUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SecurityAnswer.
   * @param {SecurityAnswerUpsertArgs} args - Arguments to update or create a SecurityAnswer.
   * @example
   * // Update or create a SecurityAnswer
   * const securityAnswer = await prisma.securityAnswer.upsert({
   *   create: {
   *     // ... data to create a SecurityAnswer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SecurityAnswer we want to update
   *   }
   * })
   */
  upsert<T extends SecurityAnswerUpsertArgs>(
    args: Prisma.SelectSubset<T, SecurityAnswerUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityAnswerClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityAnswerPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SecurityAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerCountArgs} args - Arguments to filter SecurityAnswers to count.
   * @example
   * // Count the number of SecurityAnswers
   * const count = await prisma.securityAnswer.count({
   *   where: {
   *     // ... the filter for the SecurityAnswers we want to count
   *   }
   * })
   **/
  count<T extends SecurityAnswerCountArgs>(
    args?: Prisma.Subset<T, SecurityAnswerCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SecurityAnswerCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SecurityAnswer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SecurityAnswerAggregateArgs>(
    args: Prisma.Subset<T, SecurityAnswerAggregateArgs>
  ): Prisma.PrismaPromise<GetSecurityAnswerAggregateType<T>>;

  /**
   * Group by SecurityAnswer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityAnswerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SecurityAnswerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SecurityAnswerGroupByArgs["orderBy"] }
      : { orderBy?: SecurityAnswerGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SecurityAnswerGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetSecurityAnswerGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SecurityAnswer model
   */
  readonly fields: SecurityAnswerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SecurityAnswer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SecurityAnswerClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  question<T extends Prisma.SecurityQuestionDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SecurityQuestionDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SecurityQuestionPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SecurityAnswer model
 */
export interface SecurityAnswerFieldRefs {
  readonly id: Prisma.FieldRef<"SecurityAnswer", "String">;
  readonly answer: Prisma.FieldRef<"SecurityAnswer", "String">;
  readonly userId: Prisma.FieldRef<"SecurityAnswer", "String">;
  readonly securityQuestionId: Prisma.FieldRef<"SecurityAnswer", "String">;
}

// Custom InputTypes
/**
 * SecurityAnswer findUnique
 */
export type SecurityAnswerFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityAnswer to fetch.
   */
  where: Prisma.SecurityAnswerWhereUniqueInput;
};

/**
 * SecurityAnswer findUniqueOrThrow
 */
export type SecurityAnswerFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityAnswer to fetch.
   */
  where: Prisma.SecurityAnswerWhereUniqueInput;
};

/**
 * SecurityAnswer findFirst
 */
export type SecurityAnswerFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityAnswer to fetch.
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityAnswers to fetch.
   */
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithRelationInput
    | Prisma.SecurityAnswerOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SecurityAnswers.
   */
  cursor?: Prisma.SecurityAnswerWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SecurityAnswers.
   */
  distinct?: Prisma.SecurityAnswerScalarFieldEnum | Prisma.SecurityAnswerScalarFieldEnum[];
};

/**
 * SecurityAnswer findFirstOrThrow
 */
export type SecurityAnswerFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityAnswer to fetch.
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityAnswers to fetch.
   */
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithRelationInput
    | Prisma.SecurityAnswerOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SecurityAnswers.
   */
  cursor?: Prisma.SecurityAnswerWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SecurityAnswers.
   */
  distinct?: Prisma.SecurityAnswerScalarFieldEnum | Prisma.SecurityAnswerScalarFieldEnum[];
};

/**
 * SecurityAnswer findMany
 */
export type SecurityAnswerFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityAnswers to fetch.
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityAnswers to fetch.
   */
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithRelationInput
    | Prisma.SecurityAnswerOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SecurityAnswers.
   */
  cursor?: Prisma.SecurityAnswerWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityAnswers.
   */
  skip?: number;
  distinct?: Prisma.SecurityAnswerScalarFieldEnum | Prisma.SecurityAnswerScalarFieldEnum[];
};

/**
 * SecurityAnswer create
 */
export type SecurityAnswerCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * The data needed to create a SecurityAnswer.
   */
  data: Prisma.XOR<Prisma.SecurityAnswerCreateInput, Prisma.SecurityAnswerUncheckedCreateInput>;
};

/**
 * SecurityAnswer createMany
 */
export type SecurityAnswerCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SecurityAnswers.
   */
  data: Prisma.SecurityAnswerCreateManyInput | Prisma.SecurityAnswerCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SecurityAnswer createManyAndReturn
 */
export type SecurityAnswerCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * The data used to create many SecurityAnswers.
   */
  data: Prisma.SecurityAnswerCreateManyInput | Prisma.SecurityAnswerCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * SecurityAnswer update
 */
export type SecurityAnswerUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * The data needed to update a SecurityAnswer.
   */
  data: Prisma.XOR<Prisma.SecurityAnswerUpdateInput, Prisma.SecurityAnswerUncheckedUpdateInput>;
  /**
   * Choose, which SecurityAnswer to update.
   */
  where: Prisma.SecurityAnswerWhereUniqueInput;
};

/**
 * SecurityAnswer updateMany
 */
export type SecurityAnswerUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SecurityAnswers.
   */
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateManyMutationInput,
    Prisma.SecurityAnswerUncheckedUpdateManyInput
  >;
  /**
   * Filter which SecurityAnswers to update
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * Limit how many SecurityAnswers to update.
   */
  limit?: number;
};

/**
 * SecurityAnswer updateManyAndReturn
 */
export type SecurityAnswerUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * The data used to update SecurityAnswers.
   */
  data: Prisma.XOR<
    Prisma.SecurityAnswerUpdateManyMutationInput,
    Prisma.SecurityAnswerUncheckedUpdateManyInput
  >;
  /**
   * Filter which SecurityAnswers to update
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * Limit how many SecurityAnswers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * SecurityAnswer upsert
 */
export type SecurityAnswerUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * The filter to search for the SecurityAnswer to update in case it exists.
   */
  where: Prisma.SecurityAnswerWhereUniqueInput;
  /**
   * In case the SecurityAnswer found by the `where` argument doesn't exist, create a new SecurityAnswer with this data.
   */
  create: Prisma.XOR<Prisma.SecurityAnswerCreateInput, Prisma.SecurityAnswerUncheckedCreateInput>;
  /**
   * In case the SecurityAnswer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SecurityAnswerUpdateInput, Prisma.SecurityAnswerUncheckedUpdateInput>;
};

/**
 * SecurityAnswer delete
 */
export type SecurityAnswerDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  /**
   * Filter which SecurityAnswer to delete.
   */
  where: Prisma.SecurityAnswerWhereUniqueInput;
};

/**
 * SecurityAnswer deleteMany
 */
export type SecurityAnswerDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SecurityAnswers to delete
   */
  where?: Prisma.SecurityAnswerWhereInput;
  /**
   * Limit how many SecurityAnswers to delete.
   */
  limit?: number;
};

/**
 * SecurityAnswer without action
 */
export type SecurityAnswerDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
};
