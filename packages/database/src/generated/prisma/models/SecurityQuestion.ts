/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `SecurityQuestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model SecurityQuestion
 *
 */
export type SecurityQuestionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SecurityQuestionPayload>;

export type AggregateSecurityQuestion = {
  _count: SecurityQuestionCountAggregateOutputType | null;
  _min: SecurityQuestionMinAggregateOutputType | null;
  _max: SecurityQuestionMaxAggregateOutputType | null;
};

export type SecurityQuestionMinAggregateOutputType = {
  id: string | null;
  questionEn: string | null;
  questionFr: string | null;
  deprecated: boolean | null;
};

export type SecurityQuestionMaxAggregateOutputType = {
  id: string | null;
  questionEn: string | null;
  questionFr: string | null;
  deprecated: boolean | null;
};

export type SecurityQuestionCountAggregateOutputType = {
  id: number;
  questionEn: number;
  questionFr: number;
  deprecated: number;
  _all: number;
};

export type SecurityQuestionMinAggregateInputType = {
  id?: true;
  questionEn?: true;
  questionFr?: true;
  deprecated?: true;
};

export type SecurityQuestionMaxAggregateInputType = {
  id?: true;
  questionEn?: true;
  questionFr?: true;
  deprecated?: true;
};

export type SecurityQuestionCountAggregateInputType = {
  id?: true;
  questionEn?: true;
  questionFr?: true;
  deprecated?: true;
  _all?: true;
};

export type SecurityQuestionAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SecurityQuestion to aggregate.
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityQuestions to fetch.
   */
  orderBy?:
    | Prisma.SecurityQuestionOrderByWithRelationInput
    | Prisma.SecurityQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SecurityQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SecurityQuestions
   **/
  _count?: true | SecurityQuestionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SecurityQuestionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SecurityQuestionMaxAggregateInputType;
};

export type GetSecurityQuestionAggregateType<T extends SecurityQuestionAggregateArgs> = {
  [P in keyof T & keyof AggregateSecurityQuestion]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSecurityQuestion[P]>
    : Prisma.GetScalarType<T[P], AggregateSecurityQuestion[P]>;
};

export type SecurityQuestionGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SecurityQuestionWhereInput;
  orderBy?:
    | Prisma.SecurityQuestionOrderByWithAggregationInput
    | Prisma.SecurityQuestionOrderByWithAggregationInput[];
  by: Prisma.SecurityQuestionScalarFieldEnum[] | Prisma.SecurityQuestionScalarFieldEnum;
  having?: Prisma.SecurityQuestionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SecurityQuestionCountAggregateInputType | true;
  _min?: SecurityQuestionMinAggregateInputType;
  _max?: SecurityQuestionMaxAggregateInputType;
};

export type SecurityQuestionGroupByOutputType = {
  id: string;
  questionEn: string;
  questionFr: string;
  deprecated: boolean;
  _count: SecurityQuestionCountAggregateOutputType | null;
  _min: SecurityQuestionMinAggregateOutputType | null;
  _max: SecurityQuestionMaxAggregateOutputType | null;
};

type GetSecurityQuestionGroupByPayload<T extends SecurityQuestionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SecurityQuestionGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SecurityQuestionGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SecurityQuestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SecurityQuestionGroupByOutputType[P]>;
      }
    >
  >;

export type SecurityQuestionWhereInput = {
  AND?: Prisma.SecurityQuestionWhereInput | Prisma.SecurityQuestionWhereInput[];
  OR?: Prisma.SecurityQuestionWhereInput[];
  NOT?: Prisma.SecurityQuestionWhereInput | Prisma.SecurityQuestionWhereInput[];
  id?: Prisma.StringFilter<"SecurityQuestion"> | string;
  questionEn?: Prisma.StringFilter<"SecurityQuestion"> | string;
  questionFr?: Prisma.StringFilter<"SecurityQuestion"> | string;
  deprecated?: Prisma.BoolFilter<"SecurityQuestion"> | boolean;
  securityAnswer?: Prisma.SecurityAnswerListRelationFilter;
};

export type SecurityQuestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  questionEn?: Prisma.SortOrder;
  questionFr?: Prisma.SortOrder;
  deprecated?: Prisma.SortOrder;
  securityAnswer?: Prisma.SecurityAnswerOrderByRelationAggregateInput;
};

export type SecurityQuestionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    questionEn?: string;
    questionFr?: string;
    AND?: Prisma.SecurityQuestionWhereInput | Prisma.SecurityQuestionWhereInput[];
    OR?: Prisma.SecurityQuestionWhereInput[];
    NOT?: Prisma.SecurityQuestionWhereInput | Prisma.SecurityQuestionWhereInput[];
    deprecated?: Prisma.BoolFilter<"SecurityQuestion"> | boolean;
    securityAnswer?: Prisma.SecurityAnswerListRelationFilter;
  },
  "id" | "questionEn" | "questionFr"
>;

export type SecurityQuestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  questionEn?: Prisma.SortOrder;
  questionFr?: Prisma.SortOrder;
  deprecated?: Prisma.SortOrder;
  _count?: Prisma.SecurityQuestionCountOrderByAggregateInput;
  _max?: Prisma.SecurityQuestionMaxOrderByAggregateInput;
  _min?: Prisma.SecurityQuestionMinOrderByAggregateInput;
};

export type SecurityQuestionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SecurityQuestionScalarWhereWithAggregatesInput
    | Prisma.SecurityQuestionScalarWhereWithAggregatesInput[];
  OR?: Prisma.SecurityQuestionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SecurityQuestionScalarWhereWithAggregatesInput
    | Prisma.SecurityQuestionScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"SecurityQuestion"> | string;
  questionEn?: Prisma.StringWithAggregatesFilter<"SecurityQuestion"> | string;
  questionFr?: Prisma.StringWithAggregatesFilter<"SecurityQuestion"> | string;
  deprecated?: Prisma.BoolWithAggregatesFilter<"SecurityQuestion"> | boolean;
};

export type SecurityQuestionCreateInput = {
  id?: string;
  questionEn: string;
  questionFr: string;
  deprecated?: boolean;
  securityAnswer?: Prisma.SecurityAnswerCreateNestedManyWithoutQuestionInput;
};

export type SecurityQuestionUncheckedCreateInput = {
  id?: string;
  questionEn: string;
  questionFr: string;
  deprecated?: boolean;
  securityAnswer?: Prisma.SecurityAnswerUncheckedCreateNestedManyWithoutQuestionInput;
};

export type SecurityQuestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  securityAnswer?: Prisma.SecurityAnswerUpdateManyWithoutQuestionNestedInput;
};

export type SecurityQuestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  securityAnswer?: Prisma.SecurityAnswerUncheckedUpdateManyWithoutQuestionNestedInput;
};

export type SecurityQuestionCreateManyInput = {
  id?: string;
  questionEn: string;
  questionFr: string;
  deprecated?: boolean;
};

export type SecurityQuestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SecurityQuestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SecurityQuestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionEn?: Prisma.SortOrder;
  questionFr?: Prisma.SortOrder;
  deprecated?: Prisma.SortOrder;
};

export type SecurityQuestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionEn?: Prisma.SortOrder;
  questionFr?: Prisma.SortOrder;
  deprecated?: Prisma.SortOrder;
};

export type SecurityQuestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionEn?: Prisma.SortOrder;
  questionFr?: Prisma.SortOrder;
  deprecated?: Prisma.SortOrder;
};

export type SecurityQuestionScalarRelationFilter = {
  is?: Prisma.SecurityQuestionWhereInput;
  isNot?: Prisma.SecurityQuestionWhereInput;
};

export type SecurityQuestionCreateNestedOneWithoutSecurityAnswerInput = {
  create?: Prisma.XOR<
    Prisma.SecurityQuestionCreateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedCreateWithoutSecurityAnswerInput
  >;
  connectOrCreate?: Prisma.SecurityQuestionCreateOrConnectWithoutSecurityAnswerInput;
  connect?: Prisma.SecurityQuestionWhereUniqueInput;
};

export type SecurityQuestionUpdateOneRequiredWithoutSecurityAnswerNestedInput = {
  create?: Prisma.XOR<
    Prisma.SecurityQuestionCreateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedCreateWithoutSecurityAnswerInput
  >;
  connectOrCreate?: Prisma.SecurityQuestionCreateOrConnectWithoutSecurityAnswerInput;
  upsert?: Prisma.SecurityQuestionUpsertWithoutSecurityAnswerInput;
  connect?: Prisma.SecurityQuestionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SecurityQuestionUpdateToOneWithWhereWithoutSecurityAnswerInput,
      Prisma.SecurityQuestionUpdateWithoutSecurityAnswerInput
    >,
    Prisma.SecurityQuestionUncheckedUpdateWithoutSecurityAnswerInput
  >;
};

export type SecurityQuestionCreateWithoutSecurityAnswerInput = {
  id?: string;
  questionEn: string;
  questionFr: string;
  deprecated?: boolean;
};

export type SecurityQuestionUncheckedCreateWithoutSecurityAnswerInput = {
  id?: string;
  questionEn: string;
  questionFr: string;
  deprecated?: boolean;
};

export type SecurityQuestionCreateOrConnectWithoutSecurityAnswerInput = {
  where: Prisma.SecurityQuestionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SecurityQuestionCreateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedCreateWithoutSecurityAnswerInput
  >;
};

export type SecurityQuestionUpsertWithoutSecurityAnswerInput = {
  update: Prisma.XOR<
    Prisma.SecurityQuestionUpdateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedUpdateWithoutSecurityAnswerInput
  >;
  create: Prisma.XOR<
    Prisma.SecurityQuestionCreateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedCreateWithoutSecurityAnswerInput
  >;
  where?: Prisma.SecurityQuestionWhereInput;
};

export type SecurityQuestionUpdateToOneWithWhereWithoutSecurityAnswerInput = {
  where?: Prisma.SecurityQuestionWhereInput;
  data: Prisma.XOR<
    Prisma.SecurityQuestionUpdateWithoutSecurityAnswerInput,
    Prisma.SecurityQuestionUncheckedUpdateWithoutSecurityAnswerInput
  >;
};

export type SecurityQuestionUpdateWithoutSecurityAnswerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SecurityQuestionUncheckedUpdateWithoutSecurityAnswerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionEn?: Prisma.StringFieldUpdateOperationsInput | string;
  questionFr?: Prisma.StringFieldUpdateOperationsInput | string;
  deprecated?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

/**
 * Count Type SecurityQuestionCountOutputType
 */

export type SecurityQuestionCountOutputType = {
  securityAnswer: number;
};

export type SecurityQuestionCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  securityAnswer?: boolean | SecurityQuestionCountOutputTypeCountSecurityAnswerArgs;
};

/**
 * SecurityQuestionCountOutputType without action
 */
export type SecurityQuestionCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestionCountOutputType
   */
  select?: Prisma.SecurityQuestionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SecurityQuestionCountOutputType without action
 */
export type SecurityQuestionCountOutputTypeCountSecurityAnswerArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SecurityAnswerWhereInput;
};

export type SecurityQuestionSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionEn?: boolean;
    questionFr?: boolean;
    deprecated?: boolean;
    securityAnswer?: boolean | Prisma.SecurityQuestion$securityAnswerArgs<ExtArgs>;
    _count?: boolean | Prisma.SecurityQuestionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["securityQuestion"]
>;

export type SecurityQuestionSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionEn?: boolean;
    questionFr?: boolean;
    deprecated?: boolean;
  },
  ExtArgs["result"]["securityQuestion"]
>;

export type SecurityQuestionSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionEn?: boolean;
    questionFr?: boolean;
    deprecated?: boolean;
  },
  ExtArgs["result"]["securityQuestion"]
>;

export type SecurityQuestionSelectScalar = {
  id?: boolean;
  questionEn?: boolean;
  questionFr?: boolean;
  deprecated?: boolean;
};

export type SecurityQuestionOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "questionEn" | "questionFr" | "deprecated",
  ExtArgs["result"]["securityQuestion"]
>;
export type SecurityQuestionInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  securityAnswer?: boolean | Prisma.SecurityQuestion$securityAnswerArgs<ExtArgs>;
  _count?: boolean | Prisma.SecurityQuestionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SecurityQuestionIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type SecurityQuestionIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $SecurityQuestionPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "SecurityQuestion";
  objects: {
    securityAnswer: Prisma.$SecurityAnswerPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      questionEn: string;
      questionFr: string;
      deprecated: boolean;
    },
    ExtArgs["result"]["securityQuestion"]
  >;
  composites: {};
};

export type SecurityQuestionGetPayload<
  S extends boolean | null | undefined | SecurityQuestionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SecurityQuestionPayload, S>;

export type SecurityQuestionCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SecurityQuestionFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SecurityQuestionCountAggregateInputType | true;
};

export interface SecurityQuestionDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["SecurityQuestion"];
    meta: { name: "SecurityQuestion" };
  };
  /**
   * Find zero or one SecurityQuestion that matches the filter.
   * @param {SecurityQuestionFindUniqueArgs} args - Arguments to find a SecurityQuestion
   * @example
   * // Get one SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SecurityQuestionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SecurityQuestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SecurityQuestionFindUniqueOrThrowArgs} args - Arguments to find a SecurityQuestion
   * @example
   * // Get one SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SecurityQuestionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SecurityQuestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionFindFirstArgs} args - Arguments to find a SecurityQuestion
   * @example
   * // Get one SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SecurityQuestionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SecurityQuestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionFindFirstOrThrowArgs} args - Arguments to find a SecurityQuestion
   * @example
   * // Get one SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SecurityQuestionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SecurityQuestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SecurityQuestions
   * const securityQuestions = await prisma.securityQuestion.findMany()
   *
   * // Get first 10 SecurityQuestions
   * const securityQuestions = await prisma.securityQuestion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const securityQuestionWithIdOnly = await prisma.securityQuestion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SecurityQuestionFindManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a SecurityQuestion.
   * @param {SecurityQuestionCreateArgs} args - Arguments to create a SecurityQuestion.
   * @example
   * // Create one SecurityQuestion
   * const SecurityQuestion = await prisma.securityQuestion.create({
   *   data: {
   *     // ... data to create a SecurityQuestion
   *   }
   * })
   *
   */
  create<T extends SecurityQuestionCreateArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionCreateArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SecurityQuestions.
   * @param {SecurityQuestionCreateManyArgs} args - Arguments to create many SecurityQuestions.
   * @example
   * // Create many SecurityQuestions
   * const securityQuestion = await prisma.securityQuestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SecurityQuestionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SecurityQuestions and returns the data saved in the database.
   * @param {SecurityQuestionCreateManyAndReturnArgs} args - Arguments to create many SecurityQuestions.
   * @example
   * // Create many SecurityQuestions
   * const securityQuestion = await prisma.securityQuestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SecurityQuestions and only return the `id`
   * const securityQuestionWithIdOnly = await prisma.securityQuestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SecurityQuestionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SecurityQuestion.
   * @param {SecurityQuestionDeleteArgs} args - Arguments to delete one SecurityQuestion.
   * @example
   * // Delete one SecurityQuestion
   * const SecurityQuestion = await prisma.securityQuestion.delete({
   *   where: {
   *     // ... filter to delete one SecurityQuestion
   *   }
   * })
   *
   */
  delete<T extends SecurityQuestionDeleteArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SecurityQuestion.
   * @param {SecurityQuestionUpdateArgs} args - Arguments to update one SecurityQuestion.
   * @example
   * // Update one SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SecurityQuestionUpdateArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SecurityQuestions.
   * @param {SecurityQuestionDeleteManyArgs} args - Arguments to filter SecurityQuestions to delete.
   * @example
   * // Delete a few SecurityQuestions
   * const { count } = await prisma.securityQuestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SecurityQuestionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SecurityQuestionDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SecurityQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SecurityQuestions
   * const securityQuestion = await prisma.securityQuestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SecurityQuestionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SecurityQuestions and returns the data updated in the database.
   * @param {SecurityQuestionUpdateManyAndReturnArgs} args - Arguments to update many SecurityQuestions.
   * @example
   * // Update many SecurityQuestions
   * const securityQuestion = await prisma.securityQuestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SecurityQuestions and only return the `id`
   * const securityQuestionWithIdOnly = await prisma.securityQuestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SecurityQuestionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SecurityQuestion.
   * @param {SecurityQuestionUpsertArgs} args - Arguments to update or create a SecurityQuestion.
   * @example
   * // Update or create a SecurityQuestion
   * const securityQuestion = await prisma.securityQuestion.upsert({
   *   create: {
   *     // ... data to create a SecurityQuestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SecurityQuestion we want to update
   *   }
   * })
   */
  upsert<T extends SecurityQuestionUpsertArgs>(
    args: Prisma.SelectSubset<T, SecurityQuestionUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__SecurityQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$SecurityQuestionPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SecurityQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionCountArgs} args - Arguments to filter SecurityQuestions to count.
   * @example
   * // Count the number of SecurityQuestions
   * const count = await prisma.securityQuestion.count({
   *   where: {
   *     // ... the filter for the SecurityQuestions we want to count
   *   }
   * })
   **/
  count<T extends SecurityQuestionCountArgs>(
    args?: Prisma.Subset<T, SecurityQuestionCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SecurityQuestionCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SecurityQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SecurityQuestionAggregateArgs>(
    args: Prisma.Subset<T, SecurityQuestionAggregateArgs>
  ): Prisma.PrismaPromise<GetSecurityQuestionAggregateType<T>>;

  /**
   * Group by SecurityQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecurityQuestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SecurityQuestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SecurityQuestionGroupByArgs["orderBy"] }
      : { orderBy?: SecurityQuestionGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SecurityQuestionGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetSecurityQuestionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SecurityQuestion model
   */
  readonly fields: SecurityQuestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SecurityQuestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SecurityQuestionClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  securityAnswer<T extends Prisma.SecurityQuestion$securityAnswerArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SecurityQuestion$securityAnswerArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$SecurityAnswerPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SecurityQuestion model
 */
export interface SecurityQuestionFieldRefs {
  readonly id: Prisma.FieldRef<"SecurityQuestion", "String">;
  readonly questionEn: Prisma.FieldRef<"SecurityQuestion", "String">;
  readonly questionFr: Prisma.FieldRef<"SecurityQuestion", "String">;
  readonly deprecated: Prisma.FieldRef<"SecurityQuestion", "Boolean">;
}

// Custom InputTypes
/**
 * SecurityQuestion findUnique
 */
export type SecurityQuestionFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityQuestion to fetch.
   */
  where: Prisma.SecurityQuestionWhereUniqueInput;
};

/**
 * SecurityQuestion findUniqueOrThrow
 */
export type SecurityQuestionFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityQuestion to fetch.
   */
  where: Prisma.SecurityQuestionWhereUniqueInput;
};

/**
 * SecurityQuestion findFirst
 */
export type SecurityQuestionFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityQuestion to fetch.
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityQuestions to fetch.
   */
  orderBy?:
    | Prisma.SecurityQuestionOrderByWithRelationInput
    | Prisma.SecurityQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SecurityQuestions.
   */
  cursor?: Prisma.SecurityQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SecurityQuestions.
   */
  distinct?: Prisma.SecurityQuestionScalarFieldEnum | Prisma.SecurityQuestionScalarFieldEnum[];
};

/**
 * SecurityQuestion findFirstOrThrow
 */
export type SecurityQuestionFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityQuestion to fetch.
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityQuestions to fetch.
   */
  orderBy?:
    | Prisma.SecurityQuestionOrderByWithRelationInput
    | Prisma.SecurityQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SecurityQuestions.
   */
  cursor?: Prisma.SecurityQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SecurityQuestions.
   */
  distinct?: Prisma.SecurityQuestionScalarFieldEnum | Prisma.SecurityQuestionScalarFieldEnum[];
};

/**
 * SecurityQuestion findMany
 */
export type SecurityQuestionFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which SecurityQuestions to fetch.
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SecurityQuestions to fetch.
   */
  orderBy?:
    | Prisma.SecurityQuestionOrderByWithRelationInput
    | Prisma.SecurityQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SecurityQuestions.
   */
  cursor?: Prisma.SecurityQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SecurityQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SecurityQuestions.
   */
  skip?: number;
  distinct?: Prisma.SecurityQuestionScalarFieldEnum | Prisma.SecurityQuestionScalarFieldEnum[];
};

/**
 * SecurityQuestion create
 */
export type SecurityQuestionCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * The data needed to create a SecurityQuestion.
   */
  data: Prisma.XOR<Prisma.SecurityQuestionCreateInput, Prisma.SecurityQuestionUncheckedCreateInput>;
};

/**
 * SecurityQuestion createMany
 */
export type SecurityQuestionCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many SecurityQuestions.
   */
  data: Prisma.SecurityQuestionCreateManyInput | Prisma.SecurityQuestionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SecurityQuestion createManyAndReturn
 */
export type SecurityQuestionCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * The data used to create many SecurityQuestions.
   */
  data: Prisma.SecurityQuestionCreateManyInput | Prisma.SecurityQuestionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SecurityQuestion update
 */
export type SecurityQuestionUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * The data needed to update a SecurityQuestion.
   */
  data: Prisma.XOR<Prisma.SecurityQuestionUpdateInput, Prisma.SecurityQuestionUncheckedUpdateInput>;
  /**
   * Choose, which SecurityQuestion to update.
   */
  where: Prisma.SecurityQuestionWhereUniqueInput;
};

/**
 * SecurityQuestion updateMany
 */
export type SecurityQuestionUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update SecurityQuestions.
   */
  data: Prisma.XOR<
    Prisma.SecurityQuestionUpdateManyMutationInput,
    Prisma.SecurityQuestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which SecurityQuestions to update
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * Limit how many SecurityQuestions to update.
   */
  limit?: number;
};

/**
 * SecurityQuestion updateManyAndReturn
 */
export type SecurityQuestionUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * The data used to update SecurityQuestions.
   */
  data: Prisma.XOR<
    Prisma.SecurityQuestionUpdateManyMutationInput,
    Prisma.SecurityQuestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which SecurityQuestions to update
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * Limit how many SecurityQuestions to update.
   */
  limit?: number;
};

/**
 * SecurityQuestion upsert
 */
export type SecurityQuestionUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * The filter to search for the SecurityQuestion to update in case it exists.
   */
  where: Prisma.SecurityQuestionWhereUniqueInput;
  /**
   * In case the SecurityQuestion found by the `where` argument doesn't exist, create a new SecurityQuestion with this data.
   */
  create: Prisma.XOR<
    Prisma.SecurityQuestionCreateInput,
    Prisma.SecurityQuestionUncheckedCreateInput
  >;
  /**
   * In case the SecurityQuestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SecurityQuestionUpdateInput,
    Prisma.SecurityQuestionUncheckedUpdateInput
  >;
};

/**
 * SecurityQuestion delete
 */
export type SecurityQuestionDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
  /**
   * Filter which SecurityQuestion to delete.
   */
  where: Prisma.SecurityQuestionWhereUniqueInput;
};

/**
 * SecurityQuestion deleteMany
 */
export type SecurityQuestionDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which SecurityQuestions to delete
   */
  where?: Prisma.SecurityQuestionWhereInput;
  /**
   * Limit how many SecurityQuestions to delete.
   */
  limit?: number;
};

/**
 * SecurityQuestion.securityAnswer
 */
export type SecurityQuestion$securityAnswerArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityAnswer
   */
  select?: Prisma.SecurityAnswerSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityAnswer
   */
  omit?: Prisma.SecurityAnswerOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityAnswerInclude<ExtArgs> | null;
  where?: Prisma.SecurityAnswerWhereInput;
  orderBy?:
    | Prisma.SecurityAnswerOrderByWithRelationInput
    | Prisma.SecurityAnswerOrderByWithRelationInput[];
  cursor?: Prisma.SecurityAnswerWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.SecurityAnswerScalarFieldEnum | Prisma.SecurityAnswerScalarFieldEnum[];
};

/**
 * SecurityQuestion without action
 */
export type SecurityQuestionDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SecurityQuestion
   */
  select?: Prisma.SecurityQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SecurityQuestion
   */
  omit?: Prisma.SecurityQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecurityQuestionInclude<ExtArgs> | null;
};
