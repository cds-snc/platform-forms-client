/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Setting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model Setting
 *
 */
export type SettingModel = runtime.Types.Result.DefaultSelection<Prisma.$SettingPayload>;

export type AggregateSetting = {
  _count: SettingCountAggregateOutputType | null;
  _min: SettingMinAggregateOutputType | null;
  _max: SettingMaxAggregateOutputType | null;
};

export type SettingMinAggregateOutputType = {
  internalId: string | null;
  nameEn: string | null;
  nameFr: string | null;
  descriptionEn: string | null;
  descriptionFr: string | null;
  value: string | null;
};

export type SettingMaxAggregateOutputType = {
  internalId: string | null;
  nameEn: string | null;
  nameFr: string | null;
  descriptionEn: string | null;
  descriptionFr: string | null;
  value: string | null;
};

export type SettingCountAggregateOutputType = {
  internalId: number;
  nameEn: number;
  nameFr: number;
  descriptionEn: number;
  descriptionFr: number;
  value: number;
  _all: number;
};

export type SettingMinAggregateInputType = {
  internalId?: true;
  nameEn?: true;
  nameFr?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  value?: true;
};

export type SettingMaxAggregateInputType = {
  internalId?: true;
  nameEn?: true;
  nameFr?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  value?: true;
};

export type SettingCountAggregateInputType = {
  internalId?: true;
  nameEn?: true;
  nameFr?: true;
  descriptionEn?: true;
  descriptionFr?: true;
  value?: true;
  _all?: true;
};

export type SettingAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Setting to aggregate.
   */
  where?: Prisma.SettingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingOrderByWithRelationInput | Prisma.SettingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SettingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Settings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Settings
   **/
  _count?: true | SettingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SettingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SettingMaxAggregateInputType;
};

export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
  [P in keyof T & keyof AggregateSetting]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSetting[P]>
    : Prisma.GetScalarType<T[P], AggregateSetting[P]>;
};

export type SettingGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SettingWhereInput;
  orderBy?: Prisma.SettingOrderByWithAggregationInput | Prisma.SettingOrderByWithAggregationInput[];
  by: Prisma.SettingScalarFieldEnum[] | Prisma.SettingScalarFieldEnum;
  having?: Prisma.SettingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SettingCountAggregateInputType | true;
  _min?: SettingMinAggregateInputType;
  _max?: SettingMaxAggregateInputType;
};

export type SettingGroupByOutputType = {
  internalId: string;
  nameEn: string;
  nameFr: string;
  descriptionEn: string | null;
  descriptionFr: string | null;
  value: string | null;
  _count: SettingCountAggregateOutputType | null;
  _min: SettingMinAggregateOutputType | null;
  _max: SettingMaxAggregateOutputType | null;
};

type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SettingGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof SettingGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SettingGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SettingGroupByOutputType[P]>;
    }
  >
>;

export type SettingWhereInput = {
  AND?: Prisma.SettingWhereInput | Prisma.SettingWhereInput[];
  OR?: Prisma.SettingWhereInput[];
  NOT?: Prisma.SettingWhereInput | Prisma.SettingWhereInput[];
  internalId?: Prisma.StringFilter<"Setting"> | string;
  nameEn?: Prisma.StringFilter<"Setting"> | string;
  nameFr?: Prisma.StringFilter<"Setting"> | string;
  descriptionEn?: Prisma.StringNullableFilter<"Setting"> | string | null;
  descriptionFr?: Prisma.StringNullableFilter<"Setting"> | string | null;
  value?: Prisma.StringNullableFilter<"Setting"> | string | null;
};

export type SettingOrderByWithRelationInput = {
  internalId?: Prisma.SortOrder;
  nameEn?: Prisma.SortOrder;
  nameFr?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrderInput | Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrderInput | Prisma.SortOrder;
  value?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type SettingWhereUniqueInput = Prisma.AtLeast<
  {
    internalId?: string;
    AND?: Prisma.SettingWhereInput | Prisma.SettingWhereInput[];
    OR?: Prisma.SettingWhereInput[];
    NOT?: Prisma.SettingWhereInput | Prisma.SettingWhereInput[];
    nameEn?: Prisma.StringFilter<"Setting"> | string;
    nameFr?: Prisma.StringFilter<"Setting"> | string;
    descriptionEn?: Prisma.StringNullableFilter<"Setting"> | string | null;
    descriptionFr?: Prisma.StringNullableFilter<"Setting"> | string | null;
    value?: Prisma.StringNullableFilter<"Setting"> | string | null;
  },
  "internalId"
>;

export type SettingOrderByWithAggregationInput = {
  internalId?: Prisma.SortOrder;
  nameEn?: Prisma.SortOrder;
  nameFr?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrderInput | Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrderInput | Prisma.SortOrder;
  value?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.SettingCountOrderByAggregateInput;
  _max?: Prisma.SettingMaxOrderByAggregateInput;
  _min?: Prisma.SettingMinOrderByAggregateInput;
};

export type SettingScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SettingScalarWhereWithAggregatesInput
    | Prisma.SettingScalarWhereWithAggregatesInput[];
  OR?: Prisma.SettingScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SettingScalarWhereWithAggregatesInput
    | Prisma.SettingScalarWhereWithAggregatesInput[];
  internalId?: Prisma.StringWithAggregatesFilter<"Setting"> | string;
  nameEn?: Prisma.StringWithAggregatesFilter<"Setting"> | string;
  nameFr?: Prisma.StringWithAggregatesFilter<"Setting"> | string;
  descriptionEn?: Prisma.StringNullableWithAggregatesFilter<"Setting"> | string | null;
  descriptionFr?: Prisma.StringNullableWithAggregatesFilter<"Setting"> | string | null;
  value?: Prisma.StringNullableWithAggregatesFilter<"Setting"> | string | null;
};

export type SettingCreateInput = {
  internalId: string;
  nameEn: string;
  nameFr: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  value?: string | null;
};

export type SettingUncheckedCreateInput = {
  internalId: string;
  nameEn: string;
  nameFr: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  value?: string | null;
};

export type SettingUpdateInput = {
  internalId?: Prisma.StringFieldUpdateOperationsInput | string;
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string;
  nameFr?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SettingUncheckedUpdateInput = {
  internalId?: Prisma.StringFieldUpdateOperationsInput | string;
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string;
  nameFr?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SettingCreateManyInput = {
  internalId: string;
  nameEn: string;
  nameFr: string;
  descriptionEn?: string | null;
  descriptionFr?: string | null;
  value?: string | null;
};

export type SettingUpdateManyMutationInput = {
  internalId?: Prisma.StringFieldUpdateOperationsInput | string;
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string;
  nameFr?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SettingUncheckedUpdateManyInput = {
  internalId?: Prisma.StringFieldUpdateOperationsInput | string;
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string;
  nameFr?: Prisma.StringFieldUpdateOperationsInput | string;
  descriptionEn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  descriptionFr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type SettingCountOrderByAggregateInput = {
  internalId?: Prisma.SortOrder;
  nameEn?: Prisma.SortOrder;
  nameFr?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type SettingMaxOrderByAggregateInput = {
  internalId?: Prisma.SortOrder;
  nameEn?: Prisma.SortOrder;
  nameFr?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type SettingMinOrderByAggregateInput = {
  internalId?: Prisma.SortOrder;
  nameEn?: Prisma.SortOrder;
  nameFr?: Prisma.SortOrder;
  descriptionEn?: Prisma.SortOrder;
  descriptionFr?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
};

export type SettingSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    internalId?: boolean;
    nameEn?: boolean;
    nameFr?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    value?: boolean;
  },
  ExtArgs["result"]["setting"]
>;

export type SettingSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    internalId?: boolean;
    nameEn?: boolean;
    nameFr?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    value?: boolean;
  },
  ExtArgs["result"]["setting"]
>;

export type SettingSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    internalId?: boolean;
    nameEn?: boolean;
    nameFr?: boolean;
    descriptionEn?: boolean;
    descriptionFr?: boolean;
    value?: boolean;
  },
  ExtArgs["result"]["setting"]
>;

export type SettingSelectScalar = {
  internalId?: boolean;
  nameEn?: boolean;
  nameFr?: boolean;
  descriptionEn?: boolean;
  descriptionFr?: boolean;
  value?: boolean;
};

export type SettingOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "internalId" | "nameEn" | "nameFr" | "descriptionEn" | "descriptionFr" | "value",
  ExtArgs["result"]["setting"]
>;

export type $SettingPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Setting";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      internalId: string;
      nameEn: string;
      nameFr: string;
      descriptionEn: string | null;
      descriptionFr: string | null;
      value: string | null;
    },
    ExtArgs["result"]["setting"]
  >;
  composites: {};
};

export type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$SettingPayload, S>;

export type SettingCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SettingFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SettingCountAggregateInputType | true;
};

export interface SettingDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Setting"]; meta: { name: "Setting" } };
  /**
   * Find zero or one Setting that matches the filter.
   * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Setting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Setting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingFindFirstArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SettingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SettingFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Setting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Settings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Settings
   * const settings = await prisma.setting.findMany()
   *
   * // Get first 10 Settings
   * const settings = await prisma.setting.findMany({ take: 10 })
   *
   * // Only select the `internalId`
   * const settingWithInternalIdOnly = await prisma.setting.findMany({ select: { internalId: true } })
   *
   */
  findMany<T extends SettingFindManyArgs>(
    args?: Prisma.SelectSubset<T, SettingFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Setting.
   * @param {SettingCreateArgs} args - Arguments to create a Setting.
   * @example
   * // Create one Setting
   * const Setting = await prisma.setting.create({
   *   data: {
   *     // ... data to create a Setting
   *   }
   * })
   *
   */
  create<T extends SettingCreateArgs>(
    args: Prisma.SelectSubset<T, SettingCreateArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Settings.
   * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
   * @example
   * // Create many Settings
   * const setting = await prisma.setting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SettingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SettingCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Settings and returns the data saved in the database.
   * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
   * @example
   * // Create many Settings
   * const setting = await prisma.setting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Settings and only return the `internalId`
   * const settingWithInternalIdOnly = await prisma.setting.createManyAndReturn({
   *   select: { internalId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Setting.
   * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
   * @example
   * // Delete one Setting
   * const Setting = await prisma.setting.delete({
   *   where: {
   *     // ... filter to delete one Setting
   *   }
   * })
   *
   */
  delete<T extends SettingDeleteArgs>(
    args: Prisma.SelectSubset<T, SettingDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Setting.
   * @param {SettingUpdateArgs} args - Arguments to update one Setting.
   * @example
   * // Update one Setting
   * const setting = await prisma.setting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SettingUpdateArgs>(
    args: Prisma.SelectSubset<T, SettingUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Settings.
   * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
   * @example
   * // Delete a few Settings
   * const { count } = await prisma.setting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SettingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Settings
   * const setting = await prisma.setting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SettingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Settings and returns the data updated in the database.
   * @param {SettingUpdateManyAndReturnArgs} args - Arguments to update many Settings.
   * @example
   * // Update many Settings
   * const setting = await prisma.setting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Settings and only return the `internalId`
   * const settingWithInternalIdOnly = await prisma.setting.updateManyAndReturn({
   *   select: { internalId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SettingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SettingUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SettingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Setting.
   * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
   * @example
   * // Update or create a Setting
   * const setting = await prisma.setting.upsert({
   *   create: {
   *     // ... data to create a Setting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Setting we want to update
   *   }
   * })
   */
  upsert<T extends SettingUpsertArgs>(
    args: Prisma.SelectSubset<T, SettingUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__SettingClient<
    runtime.Types.Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingCountArgs} args - Arguments to filter Settings to count.
   * @example
   * // Count the number of Settings
   * const count = await prisma.setting.count({
   *   where: {
   *     // ... the filter for the Settings we want to count
   *   }
   * })
   **/
  count<T extends SettingCountArgs>(
    args?: Prisma.Subset<T, SettingCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SettingCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Setting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SettingAggregateArgs>(
    args: Prisma.Subset<T, SettingAggregateArgs>
  ): Prisma.PrismaPromise<GetSettingAggregateType<T>>;

  /**
   * Group by Setting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SettingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SettingGroupByArgs["orderBy"] }
      : { orderBy?: SettingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Setting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SettingClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Setting model
 */
export interface SettingFieldRefs {
  readonly internalId: Prisma.FieldRef<"Setting", "String">;
  readonly nameEn: Prisma.FieldRef<"Setting", "String">;
  readonly nameFr: Prisma.FieldRef<"Setting", "String">;
  readonly descriptionEn: Prisma.FieldRef<"Setting", "String">;
  readonly descriptionFr: Prisma.FieldRef<"Setting", "String">;
  readonly value: Prisma.FieldRef<"Setting", "String">;
}

// Custom InputTypes
/**
 * Setting findUnique
 */
export type SettingFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter, which Setting to fetch.
   */
  where: Prisma.SettingWhereUniqueInput;
};

/**
 * Setting findUniqueOrThrow
 */
export type SettingFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter, which Setting to fetch.
   */
  where: Prisma.SettingWhereUniqueInput;
};

/**
 * Setting findFirst
 */
export type SettingFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter, which Setting to fetch.
   */
  where?: Prisma.SettingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingOrderByWithRelationInput | Prisma.SettingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Settings.
   */
  cursor?: Prisma.SettingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Settings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Settings.
   */
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[];
};

/**
 * Setting findFirstOrThrow
 */
export type SettingFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter, which Setting to fetch.
   */
  where?: Prisma.SettingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingOrderByWithRelationInput | Prisma.SettingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Settings.
   */
  cursor?: Prisma.SettingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Settings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Settings.
   */
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[];
};

/**
 * Setting findMany
 */
export type SettingFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter, which Settings to fetch.
   */
  where?: Prisma.SettingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingOrderByWithRelationInput | Prisma.SettingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Settings.
   */
  cursor?: Prisma.SettingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Settings.
   */
  skip?: number;
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[];
};

/**
 * Setting create
 */
export type SettingCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * The data needed to create a Setting.
   */
  data: Prisma.XOR<Prisma.SettingCreateInput, Prisma.SettingUncheckedCreateInput>;
};

/**
 * Setting createMany
 */
export type SettingCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Settings.
   */
  data: Prisma.SettingCreateManyInput | Prisma.SettingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Setting createManyAndReturn
 */
export type SettingCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * The data used to create many Settings.
   */
  data: Prisma.SettingCreateManyInput | Prisma.SettingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Setting update
 */
export type SettingUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * The data needed to update a Setting.
   */
  data: Prisma.XOR<Prisma.SettingUpdateInput, Prisma.SettingUncheckedUpdateInput>;
  /**
   * Choose, which Setting to update.
   */
  where: Prisma.SettingWhereUniqueInput;
};

/**
 * Setting updateMany
 */
export type SettingUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Settings.
   */
  data: Prisma.XOR<Prisma.SettingUpdateManyMutationInput, Prisma.SettingUncheckedUpdateManyInput>;
  /**
   * Filter which Settings to update
   */
  where?: Prisma.SettingWhereInput;
  /**
   * Limit how many Settings to update.
   */
  limit?: number;
};

/**
 * Setting updateManyAndReturn
 */
export type SettingUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * The data used to update Settings.
   */
  data: Prisma.XOR<Prisma.SettingUpdateManyMutationInput, Prisma.SettingUncheckedUpdateManyInput>;
  /**
   * Filter which Settings to update
   */
  where?: Prisma.SettingWhereInput;
  /**
   * Limit how many Settings to update.
   */
  limit?: number;
};

/**
 * Setting upsert
 */
export type SettingUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * The filter to search for the Setting to update in case it exists.
   */
  where: Prisma.SettingWhereUniqueInput;
  /**
   * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
   */
  create: Prisma.XOR<Prisma.SettingCreateInput, Prisma.SettingUncheckedCreateInput>;
  /**
   * In case the Setting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SettingUpdateInput, Prisma.SettingUncheckedUpdateInput>;
};

/**
 * Setting delete
 */
export type SettingDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
  /**
   * Filter which Setting to delete.
   */
  where: Prisma.SettingWhereUniqueInput;
};

/**
 * Setting deleteMany
 */
export type SettingDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Settings to delete
   */
  where?: Prisma.SettingWhereInput;
  /**
   * Limit how many Settings to delete.
   */
  limit?: number;
};

/**
 * Setting without action
 */
export type SettingDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Setting
   */
  select?: Prisma.SettingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Setting
   */
  omit?: Prisma.SettingOmit<ExtArgs> | null;
};
