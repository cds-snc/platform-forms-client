/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `UserFeature` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model UserFeature
 *
 */
export type UserFeatureModel = runtime.Types.Result.DefaultSelection<Prisma.$UserFeaturePayload>;

export type AggregateUserFeature = {
  _count: UserFeatureCountAggregateOutputType | null;
  _min: UserFeatureMinAggregateOutputType | null;
  _max: UserFeatureMaxAggregateOutputType | null;
};

export type UserFeatureMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  feature: string | null;
};

export type UserFeatureMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  feature: string | null;
};

export type UserFeatureCountAggregateOutputType = {
  id: number;
  userId: number;
  feature: number;
  _all: number;
};

export type UserFeatureMinAggregateInputType = {
  id?: true;
  userId?: true;
  feature?: true;
};

export type UserFeatureMaxAggregateInputType = {
  id?: true;
  userId?: true;
  feature?: true;
};

export type UserFeatureCountAggregateInputType = {
  id?: true;
  userId?: true;
  feature?: true;
  _all?: true;
};

export type UserFeatureAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserFeature to aggregate.
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?:
    | Prisma.UserFeatureOrderByWithRelationInput
    | Prisma.UserFeatureOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserFeatureWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserFeatures
   **/
  _count?: true | UserFeatureCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserFeatureMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserFeatureMaxAggregateInputType;
};

export type GetUserFeatureAggregateType<T extends UserFeatureAggregateArgs> = {
  [P in keyof T & keyof AggregateUserFeature]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserFeature[P]>
    : Prisma.GetScalarType<T[P], AggregateUserFeature[P]>;
};

export type UserFeatureGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserFeatureWhereInput;
  orderBy?:
    | Prisma.UserFeatureOrderByWithAggregationInput
    | Prisma.UserFeatureOrderByWithAggregationInput[];
  by: Prisma.UserFeatureScalarFieldEnum[] | Prisma.UserFeatureScalarFieldEnum;
  having?: Prisma.UserFeatureScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserFeatureCountAggregateInputType | true;
  _min?: UserFeatureMinAggregateInputType;
  _max?: UserFeatureMaxAggregateInputType;
};

export type UserFeatureGroupByOutputType = {
  id: string;
  userId: string;
  feature: string;
  _count: UserFeatureCountAggregateOutputType | null;
  _min: UserFeatureMinAggregateOutputType | null;
  _max: UserFeatureMaxAggregateOutputType | null;
};

type GetUserFeatureGroupByPayload<T extends UserFeatureGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserFeatureGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof UserFeatureGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], UserFeatureGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], UserFeatureGroupByOutputType[P]>;
    }
  >
>;

export type UserFeatureWhereInput = {
  AND?: Prisma.UserFeatureWhereInput | Prisma.UserFeatureWhereInput[];
  OR?: Prisma.UserFeatureWhereInput[];
  NOT?: Prisma.UserFeatureWhereInput | Prisma.UserFeatureWhereInput[];
  id?: Prisma.StringFilter<"UserFeature"> | string;
  userId?: Prisma.StringFilter<"UserFeature"> | string;
  feature?: Prisma.StringFilter<"UserFeature"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type UserFeatureOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  feature?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type UserFeatureWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    userId_feature?: Prisma.UserFeatureUserIdFeatureCompoundUniqueInput;
    AND?: Prisma.UserFeatureWhereInput | Prisma.UserFeatureWhereInput[];
    OR?: Prisma.UserFeatureWhereInput[];
    NOT?: Prisma.UserFeatureWhereInput | Prisma.UserFeatureWhereInput[];
    userId?: Prisma.StringFilter<"UserFeature"> | string;
    feature?: Prisma.StringFilter<"UserFeature"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id" | "userId_feature"
>;

export type UserFeatureOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  feature?: Prisma.SortOrder;
  _count?: Prisma.UserFeatureCountOrderByAggregateInput;
  _max?: Prisma.UserFeatureMaxOrderByAggregateInput;
  _min?: Prisma.UserFeatureMinOrderByAggregateInput;
};

export type UserFeatureScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserFeatureScalarWhereWithAggregatesInput
    | Prisma.UserFeatureScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserFeatureScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserFeatureScalarWhereWithAggregatesInput
    | Prisma.UserFeatureScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"UserFeature"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"UserFeature"> | string;
  feature?: Prisma.StringWithAggregatesFilter<"UserFeature"> | string;
};

export type UserFeatureCreateInput = {
  id?: string;
  feature: string;
  user: Prisma.UserCreateNestedOneWithoutFeaturesInput;
};

export type UserFeatureUncheckedCreateInput = {
  id?: string;
  userId: string;
  feature: string;
};

export type UserFeatureUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFeaturesNestedInput;
};

export type UserFeatureUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureCreateManyInput = {
  id?: string;
  userId: string;
  feature: string;
};

export type UserFeatureUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureListRelationFilter = {
  every?: Prisma.UserFeatureWhereInput;
  some?: Prisma.UserFeatureWhereInput;
  none?: Prisma.UserFeatureWhereInput;
};

export type UserFeatureOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type UserFeatureUserIdFeatureCompoundUniqueInput = {
  userId: string;
  feature: string;
};

export type UserFeatureCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  feature?: Prisma.SortOrder;
};

export type UserFeatureMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  feature?: Prisma.SortOrder;
};

export type UserFeatureMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  feature?: Prisma.SortOrder;
};

export type UserFeatureCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeatureCreateWithoutUserInput,
        Prisma.UserFeatureUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeatureCreateWithoutUserInput[]
    | Prisma.UserFeatureUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFeatureCreateManyUserInputEnvelope;
  connect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
};

export type UserFeatureUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeatureCreateWithoutUserInput,
        Prisma.UserFeatureUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeatureCreateWithoutUserInput[]
    | Prisma.UserFeatureUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFeatureCreateManyUserInputEnvelope;
  connect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
};

export type UserFeatureUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeatureCreateWithoutUserInput,
        Prisma.UserFeatureUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeatureCreateWithoutUserInput[]
    | Prisma.UserFeatureUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFeatureUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFeatureUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFeatureCreateManyUserInputEnvelope;
  set?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  disconnect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  delete?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  connect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  update?:
    | Prisma.UserFeatureUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFeatureUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFeatureUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFeatureUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.UserFeatureScalarWhereInput | Prisma.UserFeatureScalarWhereInput[];
};

export type UserFeatureUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeatureCreateWithoutUserInput,
        Prisma.UserFeatureUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeatureCreateWithoutUserInput[]
    | Prisma.UserFeatureUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput
    | Prisma.UserFeatureCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFeatureUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFeatureUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFeatureCreateManyUserInputEnvelope;
  set?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  disconnect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  delete?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  connect?: Prisma.UserFeatureWhereUniqueInput | Prisma.UserFeatureWhereUniqueInput[];
  update?:
    | Prisma.UserFeatureUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFeatureUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFeatureUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFeatureUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.UserFeatureScalarWhereInput | Prisma.UserFeatureScalarWhereInput[];
};

export type UserFeatureCreateWithoutUserInput = {
  id?: string;
  feature: string;
};

export type UserFeatureUncheckedCreateWithoutUserInput = {
  id?: string;
  feature: string;
};

export type UserFeatureCreateOrConnectWithoutUserInput = {
  where: Prisma.UserFeatureWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserFeatureCreateWithoutUserInput,
    Prisma.UserFeatureUncheckedCreateWithoutUserInput
  >;
};

export type UserFeatureCreateManyUserInputEnvelope = {
  data: Prisma.UserFeatureCreateManyUserInput | Prisma.UserFeatureCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type UserFeatureUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFeatureWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserFeatureUpdateWithoutUserInput,
    Prisma.UserFeatureUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserFeatureCreateWithoutUserInput,
    Prisma.UserFeatureUncheckedCreateWithoutUserInput
  >;
};

export type UserFeatureUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFeatureWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserFeatureUpdateWithoutUserInput,
    Prisma.UserFeatureUncheckedUpdateWithoutUserInput
  >;
};

export type UserFeatureUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserFeatureScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserFeatureUpdateManyMutationInput,
    Prisma.UserFeatureUncheckedUpdateManyWithoutUserInput
  >;
};

export type UserFeatureScalarWhereInput = {
  AND?: Prisma.UserFeatureScalarWhereInput | Prisma.UserFeatureScalarWhereInput[];
  OR?: Prisma.UserFeatureScalarWhereInput[];
  NOT?: Prisma.UserFeatureScalarWhereInput | Prisma.UserFeatureScalarWhereInput[];
  id?: Prisma.StringFilter<"UserFeature"> | string;
  userId?: Prisma.StringFilter<"UserFeature"> | string;
  feature?: Prisma.StringFilter<"UserFeature"> | string;
};

export type UserFeatureCreateManyUserInput = {
  id?: string;
  feature: string;
};

export type UserFeatureUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  feature?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserFeatureSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    feature?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeature"]
>;

export type UserFeatureSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    feature?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeature"]
>;

export type UserFeatureSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    feature?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeature"]
>;

export type UserFeatureSelectScalar = {
  id?: boolean;
  userId?: boolean;
  feature?: boolean;
};

export type UserFeatureOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "feature", ExtArgs["result"]["userFeature"]>;
export type UserFeatureInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserFeatureIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserFeatureIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $UserFeaturePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "UserFeature";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      feature: string;
    },
    ExtArgs["result"]["userFeature"]
  >;
  composites: {};
};

export type UserFeatureGetPayload<S extends boolean | null | undefined | UserFeatureDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$UserFeaturePayload, S>;

export type UserFeatureCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<UserFeatureFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: UserFeatureCountAggregateInputType | true;
};

export interface UserFeatureDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["UserFeature"];
    meta: { name: "UserFeature" };
  };
  /**
   * Find zero or one UserFeature that matches the filter.
   * @param {UserFeatureFindUniqueArgs} args - Arguments to find a UserFeature
   * @example
   * // Get one UserFeature
   * const userFeature = await prisma.userFeature.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFeatureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserFeatureFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserFeature that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFeatureFindUniqueOrThrowArgs} args - Arguments to find a UserFeature
   * @example
   * // Get one UserFeature
   * const userFeature = await prisma.userFeature.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFeatureFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, UserFeatureFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFeature that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureFindFirstArgs} args - Arguments to find a UserFeature
   * @example
   * // Get one UserFeature
   * const userFeature = await prisma.userFeature.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFeatureFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFeature that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureFindFirstOrThrowArgs} args - Arguments to find a UserFeature
   * @example
   * // Get one UserFeature
   * const userFeature = await prisma.userFeature.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFeatureFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserFeatures
   * const userFeatures = await prisma.userFeature.findMany()
   *
   * // Get first 10 UserFeatures
   * const userFeatures = await prisma.userFeature.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const userFeatureWithIdOnly = await prisma.userFeature.findMany({ select: { id: true } })
   *
   */
  findMany<T extends UserFeatureFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a UserFeature.
   * @param {UserFeatureCreateArgs} args - Arguments to create a UserFeature.
   * @example
   * // Create one UserFeature
   * const UserFeature = await prisma.userFeature.create({
   *   data: {
   *     // ... data to create a UserFeature
   *   }
   * })
   *
   */
  create<T extends UserFeatureCreateArgs>(
    args: Prisma.SelectSubset<T, UserFeatureCreateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserFeatures.
   * @param {UserFeatureCreateManyArgs} args - Arguments to create many UserFeatures.
   * @example
   * // Create many UserFeatures
   * const userFeature = await prisma.userFeature.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserFeatureCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserFeatures and returns the data saved in the database.
   * @param {UserFeatureCreateManyAndReturnArgs} args - Arguments to create many UserFeatures.
   * @example
   * // Create many UserFeatures
   * const userFeature = await prisma.userFeature.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserFeatures and only return the `id`
   * const userFeatureWithIdOnly = await prisma.userFeature.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserFeatureCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserFeature.
   * @param {UserFeatureDeleteArgs} args - Arguments to delete one UserFeature.
   * @example
   * // Delete one UserFeature
   * const UserFeature = await prisma.userFeature.delete({
   *   where: {
   *     // ... filter to delete one UserFeature
   *   }
   * })
   *
   */
  delete<T extends UserFeatureDeleteArgs>(
    args: Prisma.SelectSubset<T, UserFeatureDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserFeature.
   * @param {UserFeatureUpdateArgs} args - Arguments to update one UserFeature.
   * @example
   * // Update one UserFeature
   * const userFeature = await prisma.userFeature.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserFeatureUpdateArgs>(
    args: Prisma.SelectSubset<T, UserFeatureUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserFeatures.
   * @param {UserFeatureDeleteManyArgs} args - Arguments to filter UserFeatures to delete.
   * @example
   * // Delete a few UserFeatures
   * const { count } = await prisma.userFeature.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserFeatureDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeatureDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserFeatures
   * const userFeature = await prisma.userFeature.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserFeatureUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserFeatureUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFeatures and returns the data updated in the database.
   * @param {UserFeatureUpdateManyAndReturnArgs} args - Arguments to update many UserFeatures.
   * @example
   * // Update many UserFeatures
   * const userFeature = await prisma.userFeature.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserFeatures and only return the `id`
   * const userFeatureWithIdOnly = await prisma.userFeature.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserFeatureUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, UserFeatureUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserFeature.
   * @param {UserFeatureUpsertArgs} args - Arguments to update or create a UserFeature.
   * @example
   * // Update or create a UserFeature
   * const userFeature = await prisma.userFeature.upsert({
   *   create: {
   *     // ... data to create a UserFeature
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserFeature we want to update
   *   }
   * })
   */
  upsert<T extends UserFeatureUpsertArgs>(
    args: Prisma.SelectSubset<T, UserFeatureUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeatureClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureCountArgs} args - Arguments to filter UserFeatures to count.
   * @example
   * // Count the number of UserFeatures
   * const count = await prisma.userFeature.count({
   *   where: {
   *     // ... the filter for the UserFeatures we want to count
   *   }
   * })
   **/
  count<T extends UserFeatureCountArgs>(
    args?: Prisma.Subset<T, UserFeatureCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], UserFeatureCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserFeatureAggregateArgs>(
    args: Prisma.Subset<T, UserFeatureAggregateArgs>
  ): Prisma.PrismaPromise<GetUserFeatureAggregateType<T>>;

  /**
   * Group by UserFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeatureGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserFeatureGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserFeatureGroupByArgs["orderBy"] }
      : { orderBy?: UserFeatureGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, UserFeatureGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetUserFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserFeature model
   */
  readonly fields: UserFeatureFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserFeature.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserFeatureClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserFeature model
 */
export interface UserFeatureFieldRefs {
  readonly id: Prisma.FieldRef<"UserFeature", "String">;
  readonly userId: Prisma.FieldRef<"UserFeature", "String">;
  readonly feature: Prisma.FieldRef<"UserFeature", "String">;
}

// Custom InputTypes
/**
 * UserFeature findUnique
 */
export type UserFeatureFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeature to fetch.
   */
  where: Prisma.UserFeatureWhereUniqueInput;
};

/**
 * UserFeature findUniqueOrThrow
 */
export type UserFeatureFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeature to fetch.
   */
  where: Prisma.UserFeatureWhereUniqueInput;
};

/**
 * UserFeature findFirst
 */
export type UserFeatureFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeature to fetch.
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?:
    | Prisma.UserFeatureOrderByWithRelationInput
    | Prisma.UserFeatureOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFeatures.
   */
  cursor?: Prisma.UserFeatureWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFeatures.
   */
  distinct?: Prisma.UserFeatureScalarFieldEnum | Prisma.UserFeatureScalarFieldEnum[];
};

/**
 * UserFeature findFirstOrThrow
 */
export type UserFeatureFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeature to fetch.
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?:
    | Prisma.UserFeatureOrderByWithRelationInput
    | Prisma.UserFeatureOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFeatures.
   */
  cursor?: Prisma.UserFeatureWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFeatures.
   */
  distinct?: Prisma.UserFeatureScalarFieldEnum | Prisma.UserFeatureScalarFieldEnum[];
};

/**
 * UserFeature findMany
 */
export type UserFeatureFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?:
    | Prisma.UserFeatureOrderByWithRelationInput
    | Prisma.UserFeatureOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserFeatures.
   */
  cursor?: Prisma.UserFeatureWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  distinct?: Prisma.UserFeatureScalarFieldEnum | Prisma.UserFeatureScalarFieldEnum[];
};

/**
 * UserFeature create
 */
export type UserFeatureCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserFeature.
   */
  data: Prisma.XOR<Prisma.UserFeatureCreateInput, Prisma.UserFeatureUncheckedCreateInput>;
};

/**
 * UserFeature createMany
 */
export type UserFeatureCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many UserFeatures.
   */
  data: Prisma.UserFeatureCreateManyInput | Prisma.UserFeatureCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserFeature createManyAndReturn
 */
export type UserFeatureCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * The data used to create many UserFeatures.
   */
  data: Prisma.UserFeatureCreateManyInput | Prisma.UserFeatureCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFeature update
 */
export type UserFeatureUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserFeature.
   */
  data: Prisma.XOR<Prisma.UserFeatureUpdateInput, Prisma.UserFeatureUncheckedUpdateInput>;
  /**
   * Choose, which UserFeature to update.
   */
  where: Prisma.UserFeatureWhereUniqueInput;
};

/**
 * UserFeature updateMany
 */
export type UserFeatureUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update UserFeatures.
   */
  data: Prisma.XOR<
    Prisma.UserFeatureUpdateManyMutationInput,
    Prisma.UserFeatureUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserFeatures to update
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * Limit how many UserFeatures to update.
   */
  limit?: number;
};

/**
 * UserFeature updateManyAndReturn
 */
export type UserFeatureUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * The data used to update UserFeatures.
   */
  data: Prisma.XOR<
    Prisma.UserFeatureUpdateManyMutationInput,
    Prisma.UserFeatureUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserFeatures to update
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * Limit how many UserFeatures to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFeature upsert
 */
export type UserFeatureUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserFeature to update in case it exists.
   */
  where: Prisma.UserFeatureWhereUniqueInput;
  /**
   * In case the UserFeature found by the `where` argument doesn't exist, create a new UserFeature with this data.
   */
  create: Prisma.XOR<Prisma.UserFeatureCreateInput, Prisma.UserFeatureUncheckedCreateInput>;
  /**
   * In case the UserFeature was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserFeatureUpdateInput, Prisma.UserFeatureUncheckedUpdateInput>;
};

/**
 * UserFeature delete
 */
export type UserFeatureDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
  /**
   * Filter which UserFeature to delete.
   */
  where: Prisma.UserFeatureWhereUniqueInput;
};

/**
 * UserFeature deleteMany
 */
export type UserFeatureDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserFeatures to delete
   */
  where?: Prisma.UserFeatureWhereInput;
  /**
   * Limit how many UserFeatures to delete.
   */
  limit?: number;
};

/**
 * UserFeature without action
 */
export type UserFeatureDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserFeature
   */
  select?: Prisma.UserFeatureSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeature
   */
  omit?: Prisma.UserFeatureOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeatureInclude<ExtArgs> | null;
};
