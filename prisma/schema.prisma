generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}
model ApiServiceAccount {
  id               String  @id
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @updatedAt @db.Timestamptz(6)
  templateId     String   @unique
  publicKeyId      String @unique
  publicKey        String @unique
  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique(map: "session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Template {
  id                String          @id @default(cuid())
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @updatedAt @db.Timestamptz(6)
  name              String          @default("")
  jsonConfig        Json
  isPublished       Boolean         @default(false)
  formPurpose       String          @default("")
  publishReason     String          @default("")
  publishFormType   String          @default("")
  publishDesc       String          @default("")
  deliveryOption    DeliveryOption?
  apiServiceAccount ApiServiceAccount?
  securityAttribute String          @default("Protected A")
  // @todo  Need to remove this field
  bearerToken       String?
  ttl               DateTime?
  users             User[]
  closingDate       DateTime?       @db.Timestamptz(6)
  closedDetails     Json?
  saveAndResume     Boolean         @default(false)
  invitations       Invitation[]
}

model DeliveryOption {
  id             String   @id @default(cuid())
  emailAddress   String
  emailSubjectEn String?
  emailSubjectFr String?
  templateId     String   @unique
  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Privilege {
  id            String  @id @default(cuid())
  name          String  @unique
  descriptionEn String?
  descriptionFr String?
  permissions   Json
  priority      Int
  users         User[]
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  image           String?
  emailVerified   DateTime?
  lastLogin       DateTime         @default(now()) @db.Timestamptz(6)
  active          Boolean          @default(true)
  privileges      Privilege[]
  accounts        Account[]
  sessions        Session[]
  templates       Template[]
  securityAnswers SecurityAnswer[]
  notes           String?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  invitations     Invitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Setting {
  internalId    String  @id
  nameEn        String
  nameFr        String
  descriptionEn String?
  descriptionFr String?
  value         String?
}

model CognitoCustom2FA {
  id               String   @id @default(cuid())
  email            String   @unique
  cognitoToken     String
  verificationCode String   @unique
  expires          DateTime

  @@unique([id, email])
}

model SecurityQuestion {
  id             String           @id @default(cuid())
  questionEn     String           @unique
  questionFr     String           @unique
  deprecated     Boolean          @default(false)
  securityAnswer SecurityAnswer[]
}

model SecurityAnswer {
  id                 String           @id @default(cuid())
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  question           SecurityQuestion @relation(fields: [securityQuestionId], references: [id], onDelete: Cascade)
  answer             String
  userId             String
  securityQuestionId String
}

model MagicLink {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
}

model Invitation {
  id           String   @id @default(cuid())
  email        String
  expires      DateTime
  templateId   String
  invitedBy    String?  
  template     Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?    @relation(fields: [invitedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([email, templateId])
}