generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model ApiUser {
  id             String         @id @default(cuid())
  templateId     String
  email          String         @db.VarChar(80)
  temporaryToken String?
  active         Boolean        @default(true)
  lastLogin      DateTime       @default(now()) @db.Timestamptz(6)
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime       @updatedAt @db.Timestamptz(6)
  template       Template       @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([templateId, email])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique(map: "session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Template {
  id                String          @id @default(cuid())
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @updatedAt @db.Timestamptz(6)
  name              String          @default("")
  jsonConfig        Json
  isPublished       Boolean         @default(false)
  deliveryOption    DeliveryOption?
  securityAttribute String          @default("Unclassified")
  bearerToken       String?
  ttl               DateTime?
  apiUsers          ApiUser[]
  users             User[]
}

model DeliveryOption {
  id             String   @id @default(cuid())
  emailAddress   String
  emailSubjectEn String?
  emailSubjectFr String?
  templateId     String   @unique
  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Privilege {
  id            String  @id @default(cuid())
  nameEn        String  @unique
  nameFr        String  @unique
  descriptionEn String?
  descriptionFr String?
  permissions   Json
  priority      Int
  users         User[]
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  image         String?
  emailVerified DateTime?
  lastLogin     DateTime    @default(now()) @db.Timestamptz(6)
  privileges    Privilege[]
  accounts      Account[]
  sessions      Session[]
  templates     Template[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
