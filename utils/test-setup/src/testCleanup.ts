import { requestUserInput } from "./common/utils.js";
import { MultiBar } from "cli-progress";
import { deleteResponses } from "./cleanup/deleteResponse.js";
import { deleteForm } from "./cleanup/deleteForm.js";
import { unlink } from "node:fs/promises";
import { styleText } from "node:util";
// @ts-ignore
import output from "../output.json"; // This file is automatically generated once you have used the setup action.
import { cleanUpFileAttachments } from "./cleanup/cleanUpFileAttachments.js";

class FormDeletionException extends Error {
  public formId: string;

  constructor(formId: string, message: string) {
    super(message);
    Object.setPrototypeOf(this, FormDeletionException.prototype);

    this.formId = formId;
  }
}

async function main(): Promise<void> {
  let multiBarProgress: MultiBar | undefined = undefined;

  try {
    const formIdsToCleanUp = output.testForms.map((t) => t.id);

    multiBarProgress = new MultiBar({
      format: "[{bar}] | {step} ({formId})",
      barsize: 20,
      barIncompleteChar: " ",
      barCompleteChar: "=",
      forceRedraw: process.stdout.rows < formIdsToCleanUp.length,
    });

    const shouldDeleteForms = Boolean(
      await requestUserInput(
        `You are about to delete ${formIdsToCleanUp.length} forms. Are you sure? (yes or no): `
      ).then((response) => (response === "yes" ? true : false))
    );

    if (shouldDeleteForms === false) return;

    console.info("Cleaning up file attachment pool...");

    await cleanUpFileAttachments(output.fileAttachmentStoredInS3);

    const cleanupOperations = formIdsToCleanUp.map(async (formId) => {
      const progress = multiBarProgress?.create(2, 0, {
        step: "Deleting responses",
        formId: formId,
      });

      try {
        await deleteResponses(formId);

        progress?.update(1, { step: "Deleting form" });

        await deleteForm(formId);

        progress?.update(2, { step: styleText("greenBright", "✔ Form deleted") });
      } catch (error) {
        progress?.update(0, { step: styleText("redBright", "✖ Failed to delete form") });
        throw new FormDeletionException(formId, (error as Error).message);
      }
    });

    const cleanupOperationsResults = await Promise.allSettled(cleanupOperations);

    multiBarProgress?.stop();

    const formsThatFailedToBeDeleted = cleanupOperationsResults
      .filter((result) => result.status === "rejected")
      .map((result) => {
        const formDeletionException = result.reason as FormDeletionException;
        return { id: formDeletionException.formId, errorMessage: formDeletionException.message };
      });

    if (formsThatFailedToBeDeleted.length > 0) {
      console.info(
        styleText(
          "yellowBright",
          `\n${formsThatFailedToBeDeleted.length} forms failed to be fully deleted.`
        )
      );

      console.error("List of errors that happened during cleanup process:");

      for (const { errorMessage } of formsThatFailedToBeDeleted) {
        console.error(errorMessage);
      }
    } else {
      await unlink("output.json");

      console.info(styleText("greenBright", "\nDone! The 'output.json' file has been deleted."));
    }
  } catch (error) {
    multiBarProgress?.stop();

    console.error(
      styleText(
        "redBright",
        `\nOops! Something wrong happened. Reason: ${(error as Error).message}`
      )
    );
  }
}

main();
